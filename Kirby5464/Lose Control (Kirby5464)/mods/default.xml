<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20170313
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, mods will not work.');
	end

	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/120 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<!--load helper file. Read modhelpers.xml for more info-->
	<Layer File="modhelpers.xml" />
	
	<!--Load this on top of everything-->
	<ZZZLayer File="debugtext.xml" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
			debug_show = false; --will display a few things such as: current second and beat, aux values and mods, loaded from debugtext.xml
			
			--more debug options
			timertype = 'seconds'; --seconds, minutes, hours (why)
			timercountdown = false; --countdown from totalsongtime
			timerrounding = false; --round the seconds, only available if timertype is set to seconds (for now)
			use_aux = false --display aux value? requires manual configuration
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number},
			mods = {
				{0,288, '*-1 2.25x, *-1 overhead, *-1 approachtype, *-1 dizzyholds, *-1 stealthpastreceptors, *-1 200 modtimer, *-1 blind, *-1 cover','end'},
				{0,56, '*-1 125 beat','end'},
				{2,4, 'dark,stealth','end'},
				{3,7, '*99 reverse','end'},
				{6,8, 'dark,stealth','end'},
				{10,12, '*3 invert','end'},
				{12,1, '*3 no invert','len'},
				{14,15, '*2 dark,*2 stealth','end'},
				{15,0.1, '*99 150 tipsy,*99 250 drunk','len'},
				{28,30, '*0.8 200 distant,tiny','end'},
				{30,1, '*5 no tiny','len'},
				{34,0.1, '*99 200 tornado','len'},
				{38,0.1, '*99 200 tornado','len'},
				{40,45, 'stealth,*3 0.5x','end'},
				{43,0.7, '55 stealth','len'},
				{50,0.1, '*99 200 tornado','len'},
				{52,0.1, '*99 200 zoomx','len'},
				{54,0.1, '*99 200 tornado','len'},
				{55,1, '*-1 no centered','len'},
				{56,64, '*2 dark,*2 stealth,*99 1x','end'},
				{56,2, '*0.7 25 rotationz','len'},
				{60,1, 'no dark,no stealth','len'},
				{60,2, '*0.7 -25 rotationz','len'},
				{64,71, '*0.25 200 distant','end'},
				{71,0.15, '*99 hide','len'},
				{79,0.15, '*99 hide','len'},
				{87,0.15, '*99 hide','len'},
				{72,79, '*0.25 200 hallway','end'},
				{80,87, '*0.25 200 space,*-1 125 beat','end'},
				{88,92, '*0.7 -200 tiny','end'},
				{92,96, '*0.7 dark,*0.7 stealth','end'},
				{95,124, '*99 stealth','end',1},
				{95,124, '*99 dark,*99 -70 flip,*99 -70 invert,*99 125 beat','end',2},
				{124,126, '*3 150 tipsy,*3 200 drunk,*3 1x','end'},
				{124,128, '*0.7 dark,*0.7 stealth','end'},
				{128,144, '*99 125 beat','end'},
				{138,0.1, '*99 200 zoomy','len'},
				{139.5,143, '*2 stealth','end'},
				{140,0.1, '*99 55 stealth','len'},
				{140.75,0.1, '*99 55 stealth','len'},
				{141.5,0.1, '*99 55 stealth','len'},
				{142,0.1, '*99 55 stealth','len'},
				{142.75,0.1, '*99 55 stealth','len'},
				{144,1, '*-1 no centered','len'},
				{147,148, '*4 dark,*4 stealth','end'},
				{147.5,152, '*99 25 rotationz,*99 50 mini','end'},
				{150,152, '*4 dark,stealth','end'},
				{153.75,154.25, '*99 2000 longboys,*99 1000 bumpy,*99 300 drunkz,*99 300 tipsy,*99 300 tanbumpyx,*99 200 tornado','end'},
				{153.751,154.25, '*4 dark,*4 stealth','end'},
				{154.25,1, '*-1 no longboys,*-1 no bumpy,*-1 no drunkz,*-1 no tipsy,*-1 no tanbumpyx,*-1 no tornado','len'},
				{157,0.1, '*99 200 bumpyx,*99 55 stealth','len'},
				{158,181, '*99 125 beat','end'},
				{160,0.1, '*99 200 tornado','len'},
				{164,0.1, '*99 200 tornado','len'},
				{166,171, 'stealth,*3 0.5x','end'},
				{169,0.7, '55 stealth','len'},
				{176,0.1, '*99 200 tornado','len'},
				{178,0.1, '*99 200 zoomx','len'},
				{180,0.1, '*99 200 tornado','len'},
				{182,1, '*-1 no centered','len'},
				{182,190, '*2 dark,*2 stealth,*4 1x','end'},
				{182,2, '*0.7 -25 rotationz','len'},
				{186,1, 'no dark,no stealth','len'},
				{186,2, '*0.7 25 rotationz','len'},
				{190,197, '*0.25 -200 incoming','end'},
				{190,213, '*99 125 beat','end'},
				{197,0.15, '*99 hide','len'},
				{198,205, '*0.25 -200 space','end'},
				{205,0.15, '*99 hide','len'},
				{206,213, '*0.25 200 distant','end'},
				{213,0.15, '*99 hide','len'},
				{214,218, '*0.7 -200 tiny,*-1 no centered','end'},
				{218,222, '*0.7 dark,*0.7 stealth','end'},
				{220,250, '*99 stealth','end',1},
				{220,246, '*99 dark,*99 -26 flip,*99 378 invert,*99 125 beat','end',2},
				{222,249, '*99 5 spline0xoffset1,*99 5 spline1xoffset1,*99 5 spline2xoffset1,*99 5 spline3xoffset1','end'},
				{250,282, '*0.5 -50 flip','end'},
				{250,282,'*0.7 200 movex','end',1},
				{250,282,'*0.7 -200 movex,*0.7 reverse','end',2},
				{254,282, '*15 90 rotationx,*15 -600 bouncez,*99 bouncezperiod,*99 600 parabolaz,*99 500 beat,*99 beatperiod','end'},
				{254,262, '*5 95 stealth,*5 95 dark','end',2},
				{262,270, '*5 95 stealth,*5 95 dark','end',1},
				{266,1.75, '*10 55 stealth,*99 stealthgr','len',1},
				{270,278, '*5 95 stealth,*5 95 dark','end',2},
				{278,282, '*99 25 spiraly','end'},
				{285,288, '*2 dark,*2 stealth','end'}
			}
			local m = mod_insert
			
			centers={{16,54},{128,143},{158,181},{206,213}}
			
			for i,v in pairs(centers) do
				for beat=v[1],v[2] do
					m(beat,1, '*99 no centered','len')
					m(beat+.1,1, '*1.125 400 centered','len')
				end
			end
			
			spliny={{95,123},{222,249}}
			
			mod_wiggle(80,8,1,25,1.7,'rotationz')
			mod_wiggle(88,6,2,150,2,'tipsy')
			mod_wiggle(91,6,6,200,2,'drunk')
			mod_wiggle(98.5,2,2,100,1.7,'distant')
			mod_wiggle(102.5,2,2,100,1.7,'hallway')
			mod_wiggle(106.5,2,2,100,1.7,'distant')
			mod_wiggle(110.5,2,2,100,1.7,'distant')
			mod_wiggle(114.5,2,2,100,1.7,'hallway')
			mod_wiggle(118.5,2,2,100,1.7,'distant')
			mod_wiggle(122.5,2,2,100,1.7,'hallway')
			mod_wiggle(190,8,1,25,1.7,'rotationz')
			mod_wiggle(198,8,1,25,1.7,'rotationy')
			mod_wiggle(214,6,2,150,2,'tipsy')
			mod_wiggle(217,6,6,300,2,'drunk')
			mod_wiggle(224.5,2,2,100,1.7,'space')
			mod_wiggle(228.5,2,2,100,1.7,'incoming')
			mod_wiggle(232.5,2,2,100,1.7,'space')
			mod_wiggle(236.5,2,2,100,1.7,'incoming')
			mod_wiggle(240.5,2,2,100,1.7,'space')
			mod_wiggle(244.5,2,2,100,1.7,'incoming')
			mod_wiggle(248.5,2,2,100,1.7,'space')
			mod_wiggle(250,16,5,150,2,'tipsy')
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,'GetProxy',true},
				{0,function()
					for pn=1,2 do
						local d = 0.25; if pn == 2 then d = 0.75 end
						local b = _G['jud'..pn..'p']
						if b then
							b:hidden(0);
							b:basezoomx(0.75);
							b:basezoomy(0.75);
							b:x(SCREEN_WIDTH*d)
							b:y(SCREEN_HEIGHT*0.5)
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(0);
							c:basezoomx(0.75);
							c:basezoomy(0.75);
							c:x(SCREEN_WIDTH*d)
							c:y(SCREEN_HEIGHT*0.5)
						end
					end
				end,true},
				{95,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
						end
					end
				end,true},
				{96, function()
					P1:bob()
					P1:effectmagnitude(300,0,0)
					P1:effectclock('beat')
				end,true},
				{123, function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:stopeffect()
						end
					end
				end,true},
				{127.5,function()
					P1:x(sw/4)
					P2:x(sw*3/4)
				end,true},
				{220,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
						end
					end
				end,true},
				{221, function()
					P1:bob()
					P1:effectmagnitude(300,0,0)
					P1:effectclock('beat')
				end,true},
				{250,function()
					P1:linear(1)
					P1:x(sw/4)
					P1:stopeffect()
					P2:linear(1)
					P2:x(sw*3/4)
				end,true},
				{254, 'Spin',true}
			}
			
			local mm = mod_message	
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
---------------------------------------------------------------------------------------
----------------------End tables 'n stuff----------------------------------------------
---------------------------------------------------------------------------------------
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
			
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				--name players, judgment and combo
				for pn=1,2 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
						_G['P'..pn..'x_origin'] = _G['P'..pn]:GetX();
						_G['P'..pn..'y_origin'] = _G['P'..pn]:GetY();
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				
				checked = true; --let this only run once
				
			end

			local beat = GAMESTATE:GetSongBeat()
			showmods='' --to not make the game f**k itself
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if beat > mod_firstSeenBeat+0.1 and disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						mod_do('clearall',i)
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
									
									--to display the current mods; this is implemented in a really stupid way
									showmods = (string.format('%.3f',v[1]))..', '..(string.format('%.3f',v[2]))..', '..(v[3])..', '..(v[4])..' - ('..(tostring(v[5]))..')\n'..(showmods);
								end
							end
						else
							SCREENMAN:SystemMessage('Bad beatmod: {'..tostring(v[1])..','..tostring(v[2])..','..tostring(v[3])..','..tostring(v[4])..','..tostring(v[5])..'}');
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				if beat > 254 and beat < 282 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..(-100*math.rad(XSPIN:GetX()))..' confusionxoffset')
					GAMESTATE:ApplyGameCommand('mod,*10000 '..((XSPIN:GetX()))..' rotationx')
				end
				----------------------------
				-- Functions and messages --
				----------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------end table handlers and perframe stuff----------------------------
---------------------------------------------------------------------------------------
			
		end"
	/>
	
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZZLAER>
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZZLAER>
	
	<Layer Type="Quad" OnCommand="hidden,1" InitCommand="%function(self) XSPIN = self end"
	SpinMessageCommand="x,0;linear,(m_bl)*60;x,360*15" />
	
</children></ActorFrame>