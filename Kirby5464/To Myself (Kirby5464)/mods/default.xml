--todo list
--1. fix 1:18~1:30 and 2:22~3:34
--2. do some polishing
--3. fix the spins
--4. cut the song to 2 mins

<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20170313
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, mods will not work.');
	end

	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/150 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
end"
><children><ActorFrame Condition="nitg_version"
OnCommand="%function(self)
	if not string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl')
	or string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d')
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') 
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d') < 
	string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') then
		SCREENMAN:SystemMessage('D3D Video Renderer detected. Expect textures to fail.');
	end
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<!--load helper file. Read modhelpers.xml for more info-->
	<Layer File="modhelpers.xml" />
	
	<!--Load this on top of everything-->
	<ZZZLayer File="debugtext.xml" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
			debug_show = false; --will display a few things such as: current second and beat, aux values and mods, loaded from debugtext.xml
			
			--more debug options
			timertype = 'seconds'; --seconds, minutes, hours (why)
			timercountdown = false; --countdown from totalsongtime
			timerrounding = false; --round the seconds, only available if timertype is set to seconds (for now)
			use_aux = false --display aux value? requires manual configuration
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number},
			mods = {
				{0,500,'*99 2.25x,*99 stealthpastreceptors,*99 cover','end'},
				{0,3,'*99 dark','end'},
				{0,1,'*99 invert,*99 55 stealth,*99 -157 confusionoffset,*99 1x','end'},
				{1.5,2.5,'*3 stealth,*3 dark,*10 no confusionoffset','end'},
				{19,34,'*10 dark','end'},
				{35,83,'*99 1x','end'},
				{34,41,'*0.6 300 centered','end',1},
				{34,41,'*3 dark,*3 stealth,*99 200 tiny','end',2},
				{41,50,'*3 dark,*3 stealth,*99 200 tiny','end',1},
				{41,50,'*0.6 300 centered','end',2},
				{50,57,'*3 dark,*3 stealth,*99 200 tiny','end',2},
				{50,57,'*0.6 300 centered','end',1},
				{57,67,'*3 dark,*3 stealth,*99 200 tiny','end',1},
				{57,67,'*0.6 300 centered','end',2},
				{67,73,'*3 dark,*3 stealth,*99 200 tiny','end',2},
				{67,73,'*0.6 300 centered','end',1},
				{73,83,'*3 dark,*3 stealth,*99 200 tiny','end',1},
				{73,83,'*0.6 300 centered','end',2},
				{82.6,95,'*999 175 beat,*999 -45 beatmult','end'},
				{91,95,'*99 no beatmult','end'},
				{95,98,'*99 250 beatmult,stealth,dark','end'},
				{95,132,'*3 50 movex','end',1},
				{95,132,'*3 -50 movex','end',2},
				{108,111,'stealth,dark','end'},
				{124,127,'stealth,dark','end'},
				{129,131,'*3 75 zoomy','end'},
				{131,131.5,'*99 -10 flip','end'},
				{131.5,131.75,'*99 -35 flip','end'},
				{131.75,160,'*99 -50 flip','end'},
				{132,160,'*99 200 movex','end',1},
				{132,160,'*99 -200 movex','end',2},
				{140,143,'stealth,dark','end'},
				{160,164,'*1000 no confusionyoffset,*1000 no rotationy,stealth,dark','end'},
				{164,195,'*99 1x','end'},
				{164,199,'*99 reverse','end'},
				{164,170,'*0.6 300 centered','end',1},
				{164,170,'*3 dark,*3 stealth,*99 200 tiny','end',2},
				{170,179,'*3 dark,*3 stealth,*99 200 tiny','end',1},
				{172,179,'*0.6 300 centered','end',2},
				{179,186,'*3 dark,*3 stealth,*99 200 tiny','end',2},
				{179,186,'*0.6 300 centered','end',1},
				{186,194,'*3 dark,*3 stealth,*99 200 tiny','end',1},
				{189,194,'*0.6 300 centered','end',2},
				{197,0.1,'*99 -150 tiny','len'},
				{198,204,'*3 reverse0','end'},
				{198.5,204,'*3 reverse1','end'},
				{199,204,'*3 reverse2','end'},
				{199.5,204,'*3 reverse3','end'},
				{201,0.1,'*99 -150 tiny','len'},
				{203,0.1,'*99 -150 tiny','len'},
				{204,206,'*3 no reverse0','end'},
				{204.5,207,'*3 no reverse2','end'},
				{205,207.5,'*3 no reverse1','end'},
				{205.5,206.5,'*3 no reverse3','end'},
				{206,211.5,'*3 reverse0','end'},
				{206.5,211.5,'*3 reverse3','end'},
				{207,211.5,'*3 reverse2','end'},
				{207.5,211.5,'*3 reverse1','end'},
				{208,211.5,'*3 reverse0','end'},
				{209,0.1,'*99 -150 tiny','len'},
				{211,0.1,'*99 -150 tiny','len'},
				{211.5,214.5,'*3 no reverse3','end'},
				{212,214.5,'*3 no reverse0','end'},
				{212.5,214.5,'*3 no reverse3','end'},
				{213,0.1,'*99 -150 tiny','len'},
				{214.5,220,'*3 reverse3','end'},
				{215,220,'*3 reverse0','end'},
				{215.5,220,'*3 reverse1','end'},
				{216,220,'*3 reverse2','end'},
				{216.5,220,'*3 reverse3','end'},
				{217,0.1,'*99 -150 tiny','len'},
				{219,0.1,'*99 -150 tiny','len'},
				{220,222,'*3 no reverse0','end'},
				{220.5,222,'*3 no reverse3','end'},
				{221,222,'*3 no reverse1','end'},
				{221.5,222,'*3 no reverse2','end'},
				{223,228,'300 centered','end'},
				{223,241,'dark,stealth','end'},
				{251,255,'*0.5 dark,*0.5 stealth','end'},
				{256,258,'stealth,dark','end'},
				{256,132,'*3 50 movex','end',1},
				{256,132,'*3 -50 movex','end',2},
				{259,0.1,'*99 1000 beat','len'},
				{259.25,1,'*999 no beat','len'},
				{268,271,'stealth,dark','end'},
				{284,287,'stealth,dark','end'},
				{289,291,'*3 25 zoomy','end'},
				{291,291.5,'*99 -10 flip','end'},
				{291.5,291.75,'*99 -35 flip','end'},
				{291.75,318,'*99 -50 flip','end'},
				{292,318,'*99 200 movex','end',1},
				{292,318,'*99 -200 movex','end',2},
				{300,303,'stealth,dark','end'},
				{318,323,'*1000 no confusionyoffset,*1000 no rotationy,*0.6 stealth,dark,*0.6 300 centered,1x','end'},
				{323,387,'*7 250 movex,*2 200 tiny0,*2 200 tiny2','end',1},
				{323,387,'*7 -250 movex,*2 200 tiny1,*2 200 tiny3','end',2},
				{323,355,'*99 drunk','end',1},
				{323,355,'*99 -100 drunk','end',2},
				{339,1,'*99 55 stealth','len'},
				{351,1,'*5 80 zoomy','len'},
				{351.5,1,'*5 60 zoomy','len'},
				{352,1,'*5 70 zoomy','len'},
				{352.5,1,'*5 zoomy','len'},
				{353,0.1,'*99 75 stealth,*99 dark','len'},
				{355,411,'*0.05 stealth','end'},
				{387,411,'*99 1x,*99 dark,*99 55 stealth','end'},
				{415,417,'stealth,dark,300 centered,*99 200 beat,*99 250 beatmult','end'},
				{415,452,'*3 50 movex','end',1},
				{415,452,'*3 -50 movex','end',2},
				{428,431,'stealth,dark','end'},
				{447,450,'*0.6 dark,*0.6 stealth,distant','end'},
				{451,451.5,'*99 -10 flip','end'},
				{451.5,451.75,'*99 -35 flip','end'},
				{451.75,480,'*99 -50 flip','end'},
				{452,480,'*99 200 movex','end',1},
				{452,480,'*99 -200 movex','end',2},
				{453,480,'*99 25 tandrunk','end'},
				{483,500,'300 centered,dark,stealth,*0.7 90 rotationz','end'}
				

			}
			
			switcheroo_add(34,'reset',99,1)
			
			local m = mod_insert
			
			for beat=3,18,1 do
				m(beat,1,'*99 -25 mini,*99 75 stealth','len')
				m(beat + 0.5,1,'*99 no mini,*99 no stealth','len')
			end
			
			for beat=19,33,1 do
				m(beat,1,'*99 55 stealth','len')
				m(beat + 0.25,1,'*99 stealth','len')
			end
			
			local swaps = {'ldur','rudl','dlru','ludr','rdul','drlu','ulrd','urld','flip','invert'};
				for i=19,32 do
					switcheroo_add(i,swaps[math.random(1,table.getn(swaps))],9999,1)
				end
				
			for beat=243,253,1 do
				m(beat,1,'*10 40 rotationz','len')
				m(beat + 0.5,1,'*10 -40 rotationz','len')
			end
			
			for beat=389,409,4 do
				m(beat,0.1,'*99 tipsy','len')
			end
			
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,function()
					
					for pn=1,2 do
						local a = _G['com'..pn]
						if a then
							a:hidden(1)
						end
					end
				end,true},
				{0,'slowbright'},
				{35,'Hide'},
				{99,'Spin'},
				{133,'vibbShow'},
				{160,'vibbHide'},
				{243,function()
					
					for pn=1,2 do
						local p = Plr(pn)
						if p then
							p:pulse()
							p:effectclock('bgm')
							p:effectmagnitude(0,1,0)
							p:effectperiod(0.5)
						end
					end
				end,true},
				{255,function()
					
					for pn=1,2 do
						local p = Plr(pn)
						if p then
							p:stopeffect()
						end
					end
				end,true},
				{259,'Spin'},
				{259,function()
					
					for pn=1,2 do
						local p = Plr(pn)
						if p then
							p:wag()
							p:effectclock('bgm')
							p:effectmagnitude(0,0,30)
							p:effectperiod(5)
						end
					end
				end,true},
				{293,'vibbShow'},
				{318,function()
					
					for pn=1,2 do
						local p = Plr(pn)
						if p then
							p:stopeffect()
						end
					end
				end,true},
				{318,'vibbHide'},
				{387,'bright'},
				{411,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:bounce()
							a:effectperiod(1)
							a:effectclock('beat')
							a:effectmagnitude(0,-50,0)
						end
					end
					
				end,true},
				{415,function()
					
					for pn=1,2 do
						local p = Plr(pn)
						if p then
							p:stopeffect()
						end
					end
				end,true},
				{415,'Hide'},
				{419,'Spin'},
				{419,'GetProxy'},
				{419,'WhiteFlash'},
				{419,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:wag()
							a:effectperiod(10)
							a:effectclock('beat')
							a:effectmagnitude(30,0,0)
						end
					end
					
				end,true},
				{453,'vibbHard'},
				{480,'vibbHide'}
			}
			
			local mm = mod_message	
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
---------------------------------------------------------------------------------------
----------------------End tables 'n stuff----------------------------------------------
---------------------------------------------------------------------------------------
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
			
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				--name players, judgment and combo
				for pn=1,2 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
						_G['P'..pn..'x_origin'] = _G['P'..pn]:GetX();
						_G['P'..pn..'y_origin'] = _G['P'..pn]:GetY();
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				
				checked = true; --let this only run once
				
			end

			local beat = GAMESTATE:GetSongBeat()
			showmods='' --to not make the game f**k itself
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if beat > mod_firstSeenBeat+0.1 and disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						mod_do('clearall',i)
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
									
									--to display the current mods; this is implemented in a really stupid way
									showmods = (string.format('%.3f',v[1]))..', '..(string.format('%.3f',v[2]))..', '..(v[3])..', '..(v[4])..' - ('..(tostring(v[5]))..')\n'..(showmods);
								end
							end
						else
							SCREENMAN:SystemMessage('Bad beatmod: {'..tostring(v[1])..','..tostring(v[2])..','..tostring(v[3])..','..tostring(v[4])..','..tostring(v[5])..'}');
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				if beat > 99 and beat < 160 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..(-100*math.rad(YSPIN:GetX()))..' confusionyoffset')
					GAMESTATE:ApplyGameCommand('mod,*10000 '..((YSPIN:GetX()))..' rotationy')
				end
				
				if beat > 251 and beat < 318 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..(-100*math.rad(YSPIN:GetX()))..' confusionyoffset')
					GAMESTATE:ApplyGameCommand('mod,*10000 '..((YSPIN:GetX()))..' rotationy')
				end
				
				if beat > 419 and beat < 480 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..(-100*math.rad(YSPIN:GetX()))..' confusionyoffset')
					GAMESTATE:ApplyGameCommand('mod,*10000 '..((YSPIN:GetX()))..' rotationy')
				end
				----------------------------
				-- Functions and messages --
				----------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------end table handlers and perframe stuff----------------------------
---------------------------------------------------------------------------------------
			
		end"
		StepP1MessageCommand="%function(self)
            if GAMESTATE:GetSongBeat() > 355 and GAMESTATE:GetSongBeat() < 386 then
                local ran = 10 + math.floor(math.random() * 20);
                GAMESTATE:ApplyGameCommand('mod, *1000 ' .. ran .. ' mini')
            end
        end"
        StepP2MessageCommand="%function(self)
            if GAMESTATE:GetSongBeat() > 355 and GAMESTATE:GetSongBeat() < 386 then
                local ran = 10 + math.floor(math.random() * 20);
                GAMESTATE:ApplyGameCommand('mod, *1000 ' .. ran .. ' mini')
            end
        end"
	/>
	
	<Layer Type="Quad" OnCommand="hidden,1" InitCommand="%function(self) YSPIN = self end"
	SpinMessageCommand="x,0;linear,(m_bl)*60;x,360*15" />
	
	<Layer Type="Quad" OnCommand="diffusealpha,0"
	WhiteFlashMessageCommand="zoomto,sw,sh;x,sw/2;y,sh/2;diffuse,1,1,1,1;linear,0.4;diffusealpha,0;" />
	
	<LAER Type="ActorFrame" OnCommand="hidden,0" InitCommand="%function(self) P1p = self end" ><children>
		<LAER Type="ActorProxy" GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('NoteField')) self:y(SCREEN_CENTER_Y) self:x(SCREEN_WIDTH/6) end end"/>
	</children></LAER>
	
	<LAER Type="ActorFrame" OnCommand="hidden,0" InitCommand="%function(self) P2p = self end" ><children>
		<LAER Type="ActorProxy" GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('NoteField')) self:y(SCREEN_CENTER_Y) self:x(SCREEN_WIDTH/1.5) end end"/>
	</children></LAER>
	
	<LAER Type="ActorFrame" OnCommand="hidden,0" InitCommand="%function(self) P3p = self end" ><children>
		<LAER Type="ActorProxy" GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('NoteField')) self:y(SCREEN_CENTER_Y) self:x(SCREEN_WIDTH/3) end end"/>
	</children></LAER>
	
	<LAER Type="ActorFrame" OnCommand="hidden,0" InitCommand="%function(self) P4p = self end" ><children>
		<LAER Type="ActorProxy" GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('NoteField')) self:y(SCREEN_CENTER_Y) self:x(SCREEN_WIDTH*0.75) end end"/>
	</children></LAER>
	
	<Layer
Type="Sprite"
Texture="transparent.png"
OnCommand="%function(self)
self:x(SCREEN_CENTER_X)
self:y(SCREEN_CENTER_Y)
self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()));
self:diffusealpha(0)
self:zoom(1)
self:queuecommand('renderMe');
end"

renderMeCommand="%function(self)
self:zoom(1)
self:SetTexture(myAft:GetTexture())
end"
slowbrightMessageCommand="linear,15;diffusealpha,0.99;blend,add"
vibbShowMessageCommand="diffusealpha,0.77;vibrate,1;effectmagnitude,3,3,3"
vibbHideMessageCommand="diffusealpha,0;stopeffect,1"
brightMessageCommand="diffusealpha,0.88;blend,add"
HideMessageCommand="diffusealpha,0;blend,normal"
vibbHardMessageCommand="diffusealpha,0.77;vibrate,1;effectmagnitude,9,9,9"
/>


        <Layer
Type="ActorFrameTexture"
OnCommand="%function(self)

    self:SetWidth(DISPLAY:GetDisplayWidth());
    self:SetHeight(DISPLAY:GetDisplayHeight());
    self:EnableDepthBuffer( true );
    self:EnableAlphaBuffer( true );
    self:EnableFloat( true );
    self:EnablePreserveTexture( true );
    self:hidden(0);
    self:diffusealpha(1);
    self:zoom(0.6)
    self:Create();
    myAft=self
end"
/>
</children></ActorFrame>