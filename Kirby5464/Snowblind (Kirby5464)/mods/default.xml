<ActorFrame
InitCommand="%function(self)

	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/315 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	function Proxy(pn)
		return _G['P'..pn..'p']
	end
	
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
			mod_globaloffset = PREFSMAN:GetPreference('GlobalOffsetSeconds');
			checked = false;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			
			
			
			
			
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
			
			
			
			
			
			
			
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,9999,'*99 2.25x, *9e9 cosec','end'},
				{1,0.1,'*99 stealth','len'},
				{2.75,0.1,'*99 stealth','len'},
				{5,0.1,'*99 stealth','len'},
				{6.75,0.1,'*99 stealth','len'},
				{9,0.1,'*99 stealth','len'},
				{10.75,0.1,'*99 stealth','len'},
				{13,0.1,'*99 stealth','len'},
				{14.75,0.1,'*99 stealth','len'},
				{16,0.1,'*99 stealth','len'},
				{18,5.87,'*3 tipsy','len'},
				{18,999,'*0.2 stealth,*0.2 dark','len'},
				{25,999,'*2.3 no stealth,*2.3 no dark','len'},
				{25.75,5.87,'*3 -100% tipsy','len'},
				{25.75,999,'*0.2 stealth,*0.2 dark','len'},
				{33,999,'*99 9999% beat,*10 no stealth,*10 no dark','len'},
				{33.1,999,'*1000 no beat','len'},
				{49,999,'*99 -9999% beat,*0.75 -900% tiny,*0.01 stealth','len'},
				{49.1,999,'*1000 no beat','len'},
				{53,999,'*99 9999% beat','len'},
				{53.1,999,'*1000 no beat','len'},
				{57,999,'*99 -9999% beat','len'},
				{57.1,999,'*1000 no beat','len'},
				{59,999,'*99 9999% beat','len'},
				{59.1,999,'*1000 no beat','len'},
				{61,999,'*99 -9999% beat','len'},
				{61.1,999,'*1000 no beat','len'},
				{62,999,'*5 no tiny,*8 no stealth,*99 9999% beat','len'},
				{62.1,999,'*1000 no beat','len'},
				{64,3.5,'*0.5 1000% confusion','len'},
				{76,10.4,'*2 60% spiralz','len'},
				{97,35,'*3 75% drunk','len'},
				{97.1,7,'*2 -60% spiralz','len'},
				{107,10.4,'*2 60% spiralz','len'},
				{127.5,999,'*9999 2000% confusion','len'},
				{127.7,999,'*9999 no confusion','len'},
				{129,999,'*0.7 dark,*99 stealth,*99 0.1x,*99 blind','len'},
				{133,1,'*99 85% stealth,*99 spiralx,*99 200% spiralxperiod','len'},
				{137,1,'*99 85% stealth,*99 spiralx,*99 200% spiralxperiod,*99 flip','len'},
				{141,1,'*99 85% stealth,*99 spiralx,*99 200% spiralxperiod,*99 invert','len'},
				{142,999,'*99 200% mini','len'},
				{143,999,'*99 2.75x,*99 50% dark,*99 25% stealth','len'},
				{143.1,999,'*0.1 no mini,35% spiralz','len'},
				{145,999,'*99 no blind','len'},
				{153,999,'125% beat,*99 beatmult,*2 no stealth','len'},
				{159,999,'*99 no beat,*3 no mini,*99 55% spiraly,*99 no spiralz','len'},
				{163,999,'*99 no spiraly,*99 zigzag','len'},
				{165,999,'*8 invert','len'},
				{165.5,999,'*8 no invert','len'},
				{165.75,999,'*8 invert','len'},
				{166,999,'*8 no invert','len'},
				{167,999,'*8 invert','len'},
				{167.5,999,'*8 no invert','len'},
				{167.75,999,'*8 invert','len'},
				{168,999,'*8 no invert','len'},
				{169,999,'*99 stealth,*99 no zigzag','len'},
				{169,0.1,'*99 55% stealth','len'},
				{169.5,0.1,'*99 55% stealth','len'},
				{169.75,0.1,'*99 55% stealth','len'},
				{170,0.1,'*99 55% stealth','len'},
				{170.25,0.1,'*99 55% stealth','len'},
				{170.5,0.1,'*99 55% stealth','len'},
				{170.75,0.1,'*99 55% stealth','len'},
				{171,999,'*3 no stealth,*6 distant','len'},
				{171,0.5,'*2 longboy','len'},
				{172,999,'*6 150% space','len'},
				{173,999,'*6 hallway','len'},
				{173.5,999,'*6 overhead','len'},
				{174,999,'*6 150% incoming','len'},
				{174,0.2,'*5 spiralx','len'},
				{175,999,'*6 105% incoming','len'},
				{175.333,999,'*6 75% incoming','len'},
				{175.667,999,'*6 no incoming','len'},
				{176,999,'*6 distant','len'},
				{177,0.1,'*6 -150% mini','len'},
				{177.25,0.1,'*6 -150% mini','len'},
				{177.75,0.1,'*6 -150% mini','len'},
				{178.25,0.1,'*6 -150% mini','len'},
				{178.5,0.1,'*6 -150% mini','len'},
				{178.75,0.1,'*6 -150% mini','len'},
				{179,999,'*2 sawtooth','len'},
				{185,0.7,'*4 tanbumpy','len'},
				{185.1,999,'*99 no sawtooth','len'},
				{187,999,'*3 tipsy,*3 55% drunk','len'},
				{192,999,'*0.5 overhead,*0.5 no tipsy,*0.5 no drunk','len'},
				{195,999,'square','len'},
				{199,999,'*8 invert','len'},
				{199.5,999,'*8 no invert','len'},
				{199.75,999,'*8 invert','len'},
				{200,999,'*8 no invert','len'},
				{201,999,'*8 invert','len'},
				{201.5,999,'*8 no invert','len'},
				{201.75,999,'*8 invert','len'},
				{202,999,'*8 no invert,*99 stealth,*99 no square','len'},
				{202.25,0.1,'*99 55% stealth','len'},
				{202.5,0.1,'*99 55% stealth','len'},
				{202.625,0.1,'*99 55% stealth','len'},
				{202.75,0.1,'*99 55% stealth','len'},
				{202.875,0.1,'*99 55% stealth','len'},
				{203,999,'*3 no stealth','len'},
				{203.5,999,'*2 200% squarez','len'},
				{207,999,'*99 15% flip','len'},
				{207.5,999,'*99 30% flip','len'},
				{207.75,999,'*99 45% flip','len'},
				{208,999,'*99 55% flip','len'},
				{208.5,999,'*99 500% bounce','len'},
				{208.51,999,'*99 no bounce,*99 no flip','len'},
				{209,0.1,'*6 -150% mini','len'},
				{209.25,0.1,'*6 -150% mini','len'},
				{209.75,0.1,'*6 -150% mini','len'},
				{210.25,0.1,'*6 -150% mini','len'},
				{210.5,0.1,'*6 -150% mini','len'},
				{210.75,0.1,'*6 -150% mini','len'},
				{211,999,'*5 no squarez,*5 digital','len'},
				{217,999,'*5 no digital','len'},
				{219,999,'*4 -100% tipsy,*4 -55% drunk,*4 hallway','len'},
				{224,999,'*0.5 no tipsy,*0.5 no drunk,*0.5 overhead','len'},
				{227,999,'*4 distant','len'},
				{228,999,'*9 200% mini','len'},
				{228.5,0.05,'*96 no mini','len'},
				{229,0.05,'*96 no mini','len'},
				{229.5,0.05,'*96 no mini','len'},
				{230,0.05,'*96 no mini','len'},
				{231,0.05,'*96 no mini','len'},
				{231.5,0.05,'*96 no mini','len'},
				{232,0.05,'*96 no mini','len'},
				{232.5,0.05,'*96 no mini','len'},
				{232.75,0.05,'*96 no mini','len'},
				{233,0.05,'*96 no mini','len'},
				{233.25,0.05,'*96 no mini','len'},
				{233.5,0.05,'*96 no mini','len'},
				{233.75,0.05,'*96 no mini','len'},
				{234,0.05,'*96 no mini','len'},
				{235,0.05,'*96 no mini','len'},
				{236,0.05,'*96 no mini','len'},
				{236.5,0.05,'*96 no mini','len'},
				{237,0.05,'*96 no mini','len'},
				{237.5,0.05,'*96 no mini','len'},
				{238,0.05,'*96 no mini','len'},
				{238.5,0.05,'*96 no mini','len'},
				{239,0.05,'*96 no mini','len'},
				{239.75,0.05,'*96 no mini','len'},
				{240.25,0.05,'*96 no mini','len'},
				{240.5,0.05,'*96 no mini','len'},
				{241,0.05,'*96 no mini','len'},
				{241.25,0.05,'*96 no mini','len'},
				{241.5,0.05,'*96 no mini','len'},
				{241.75,0.05,'*96 no mini','len'},
				{242,0.05,'*96 no mini','len'},
				{242.25,0.05,'*96 no mini','len'},
				{243,0.05,'*96 no mini','len'},
				{243.5,0.05,'*96 no mini','len'},
				{244,0.05,'*96 no mini','len'},
				{244.5,0.05,'*96 no mini','len'},
				{245,0.05,'*96 no mini','len'},
				{245.25,0.05,'*96 no mini','len'},
				{245.5,0.05,'*96 no mini','len'},
				{245.75,0.05,'*96 no mini','len'},
				{246,0.05,'*96 no mini','len'},
				{246.5,0.05,'*96 no mini','len'},
				{247,0.05,'*96 no mini','len'},
				{247.25,0.05,'*96 no mini','len'},
				{247.5,0.05,'*96 no mini','len'},
				{247.75,0.05,'*96 no mini','len'},
				{248,0.05,'*96 no mini','len'},
				{248.5,0.05,'*96 no mini','len'},
				{249,0.05,'*96 no mini','len'},
				{249.5,999,'*56 no mini,*99 no distant','len'},
				{251,10,'*3 tipsy,*3 75% drunk','len'},
				{259,999,'*4 hallway','len'},
				{260,999,'*9 200% mini','len'},
				{261,0.05,'*96 no mini','len'},
				{229,0.05,'*96 no mini','len'},
				{261.667,0.05,'*96 no mini','len'},
				{262.333,0.05,'*96 no mini','len'},
				{263,0.05,'*96 no mini','len'},
				{263.667,0.05,'*96 no mini','len'},
				{264.333,0.05,'*96 no mini','len'},
				{265,0.05,'*96 no mini','len'},
				{265.667,0.05,'*96 no mini','len'},
				{266.333,0.05,'*96 no mini','len'},
				{267,0.05,'*96 no mini','len'},
				{267.5,0.05,'*96 no mini','len'},
				{268,0.05,'*96 no mini','len'},
				{268.5,0.05,'*96 no mini','len'},
				{269,0.05,'*96 no mini','len'},
				{269.667,0.05,'*96 no mini','len'},
				{270.333,0.05,'*96 no mini','len'},
				{271,999,'*56 no mini,*5 overhead','len'},
				{271.1,1,'*5 -900% tiny','len'},
				{273,0.1,'*6 -150% mini','len'},
				{273.25,0.1,'*6 -150% mini','len'},
				{273.75,0.1,'*6 -150% mini','len'},
				{274,0.1,'*6 -150% mini','len'},
				{274.25,0.1,'*6 -150% mini','len'},
				{274.5,0.1,'*6 -150% mini','len'},
				{274.75,0.1,'*6 -150% mini','len'},
				{274.5,0.1,'*6 -150% mini','len'},
				{275,999,'*3 55% tandigital','len'},
				{281,999,'*99 no tandigital','len'},
				{283,999,'*3 -100% tipsy,*3 -100% drunk','len'},
				{289,999,'150% spiralz,*99 500% beaty,*99 1000% beatymult','len'},
				{353,999,'*99 no spiralz,*99 no beaty,*99 drunk,*99 200% digital','len'},
				{383,999,'50% flip,50% reverse,*0.5 200% mini','len'}
			}
			
			
			--time based mods
			mod_time = 0;
			--{time_start, time_end, mods, len_or_end, player_number}
			mods2 = {
				{0,9999,'*9999 9999% movex,*99 reverse','len',2},
				{0.559,9999,'*9999 9999% movex','len',1},
				{0.559,9999,'*9999 0% movex','len',2},
				{2.08,9999,'*9999 0% movex','len',1},
				{2.08,9999,'*9999 9999% movex','len',2},
				{4.037,9999,'*9999 9999% movex','len',1},
				{4.037,9999,'*9999 0% movex','len',2},
				{5.559,9999,'*9999 0% movex','len',1},
				{5.559,9999,'*9999 9999% movex','len',2},
				{7.515,9999,'*9999 9999% movex','len',1},
				{7.515,9999,'*9999 0% movex','len',2},
				{9.037,9999,'*9999 0% movex','len',1},
				{9.037,9999,'*9999 9999% movex','len',2},
				{10.993,9999,'*9999 9999% movex','len',1},
				{10.993,9999,'*9999 0% movex','len',2},
				{12.515,9999,'*9999 0% movex','len',1},
				{12.515,9999,'*9999 9999% movex','len',2},
				{13.602,9999,'*9999 9999% movex','len',1},
				{13.602,9999,'*9999 0% movex','len',2},
				{21.428,9999,'*9999 0% movex','len',1},
				{21.428,9999,'*9999 9999% movex','len',2},
				{28.385,9999,'*9999 0% movex,*99 no reverse','len',2},
			}
			
			
			
			
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 0
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:linear(0.05)
							a:x(315);
						end
					end
					
				end,true},
				{0, function()
				     jud1:x((SCREEN_WIDTH*0.25)*-1)
					 com1:x((SCREEN_WIDTH*0.25)*-1)
					 jud2:x((SCREEN_WIDTH*0.25)*1)
					 com2:x((SCREEN_WIDTH*0.25)*1)
				end,true},
				{33, function()
				     P1:linear(11)
					 P1:x(SCREEN_WIDTH/4)
					 P2:linear(11)
					 P2:x(SCREEN_WIDTH*3/4)
				end,true},
				{33, function()
				     jud1:linear(11)
					 jud1:x((SCREEN_WIDTH*0.0078125)/1)
					 com1:linear(11)
					 com1:x((SCREEN_WIDTH*0.0078125)/1)
					 jud2:linear(11)
					 jud2:x((SCREEN_WIDTH*0.0078125)/-1)
					 com2:linear(11)
					 com2:x((SCREEN_WIDTH*0.0078125)/-1)
				end,true},
				{64,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:bounce()
							a:effectperiod(1)
							a:effectclock('beat')
							a:effectmagnitude(0,-50,0)
						end
					end
					
				end,true},
				{129,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:stopeffect()
						end
					end
					
				end,true},
				{217,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:spin()
						end
					end
					
				end,true},
				{219,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:stopeffect()
							a:rotationz(0)
						end
					end
					
				end,true},
				{249.5,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:spin()
							a:effectclock('bgm')
							a:effectmagnitude(0,999,0)
						end
					end
					
				end,true},
				{251,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:stopeffect()
							a:rotationy(0)
						end
					end
					
				end,true},
				{281,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:spin()
							a:effectclock('bgm')
							a:effectmagnitude(0,999,0)
						end
					end
					
				end,true},
				{283,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:stopeffect()
							a:rotationy(0)
						end
					end
					
				end,true},
				{383,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:spin()
							a:effectclock('bgm')
							a:effectmagnitude(0,0,500)
						end
					end
					
				end,true},
			}
			
			switcheroo_add(169,'invert',99,0.3)
			switcheroo_add(169.5,'flip',99,0.3)
			switcheroo_add(169.75,'urld',99,0.3)
			switcheroo_add(170,'flip',99,0.3)
			switcheroo_add(170.25,'invert',99,0.3)
			switcheroo_add(170.5,'flip',99,0.3)
			switcheroo_add(170.75,'urld',99,0.3)
			switcheroo_add(171,'normal',99,0.3)
			switcheroo_add(202.25,'urld',99,0.3)
			switcheroo_add(202.5,'flip',99,0.3)
			switcheroo_add(202.625,'invert',99,0.3)
			switcheroo_add(202.75,'flip',99,0.3)
			switcheroo_add(202.875,'invert',99,0.3)
			switcheroo_add(203,'normal',99,0.3)
			
			
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
			mod_wiggle(82,47,1,150,0.5,'distant');
			
			
			
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
				
				----------------------
				-- grab everything? --
				----------------------
				if SCREENMAN:GetTopScreen():GetChild('LifeP1') then LifeP1 = SCREENMAN:GetTopScreen():GetChild('LifeP1') end
				if SCREENMAN:GetTopScreen():GetChild('LifeP2') then LifeP2 = SCREENMAN:GetTopScreen():GetChild('LifeP2') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP1') then ScoreP1 = SCREENMAN:GetTopScreen():GetChild('ScoreP1') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP2') then ScoreP2 = SCREENMAN:GetTopScreen():GetChild('ScoreP2') end
				if SCREENMAN:GetTopScreen():GetChild('BPMDisplay') then BPMDisplay = SCREENMAN:GetTopScreen():GetChild('BPMDisplay') end
				if SCREENMAN:GetTopScreen():GetChild('LifeFrame') then LifeFrame = SCREENMAN:GetTopScreen():GetChild('LifeFrame') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreFrame') then ScoreFrame = SCREENMAN:GetTopScreen():GetChild('ScoreFrame') end
				if SCREENMAN:GetTopScreen():GetChild('Lyrics') then Lyrics = SCREENMAN:GetTopScreen():GetChild('Lyrics') end
				if SCREENMAN:GetTopScreen():GetChild('SongForeground') then SongForeground = SCREENMAN:GetTopScreen():GetChild('SongForeground') end
				if SCREENMAN:GetTopScreen():GetChild('SongBackground') then SongBackground = SCREENMAN:GetTopScreen():GetChild('SongBackground') end
				if SCREENMAN:GetTopScreen():GetChild('Overlay') then Overlay = SCREENMAN:GetTopScreen():GetChild('Overlay') end
				if SCREENMAN:GetTopScreen():GetChild('Underlay') then Underlay = SCREENMAN:GetTopScreen():GetChild('Underlay') end
				
				--------------------------
				-- hide everything? y/n --
				--------------------------
				mod_hideall = true;
				if mod_hideall == true then
					if LifeFrame then LifeFrame:hidden(1) end
					if LifeP1 then LifeP1:hidden(1) end
					if LifeP2 then LifeP2:hidden(1) end
					if ScoreP1 then ScoreP1:hidden(1) end
					if ScoreP2 then ScoreP2:hidden(1) end
					if BPMDisplay then BPMDisplay:hidden(1) end
					if Overlay then Overlay:hidden(1) end
					if Underlay then Underlay:hidden(1) end
					if ScoreFrame then ScoreFrame:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
				--aliases for old times sake
				
				if P1 then
					jud1 = P1:GetChild('Judgment');
					com1 = P1:GetChild('Combo');
				end
				if P2 then
					jud2 = P2:GetChild('Judgment');
					com2 = P2:GetChild('Combo');
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true;
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
			
			
			
			
			
			
			
			
			
			
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						GAMESTATE:ApplyGameCommand('mod,clearall',i)
						if _G['init_modsp'..i] then 
							GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
						end
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
									else
										GAMESTATE:ApplyGameCommand('mod,'..v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				-----------------------------------------------------------------------------------------------------
				-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
				-----------------------------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods2) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if mod_time >=v[1] then
								if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
									else
										GAMESTATE:ApplyGameCommand('mod,'..v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = 'error';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				--[[
				if beat > 95 and beat < 159 then
					for i,v in pairs(prefix_plr) do
						local multi = -1; if i == 2 then multi = 1; end
						if v then
							v:skewx(math.sin(beat*math.pi/4+0.5)*multi);
							if beat >= 96 then
								v:x(SCREEN_CENTER_X+math.cos(beat*math.pi/4)*160*multi);
							end
						end
					end
				end
				]]
				
				---------------------------------------
				-- Actions table --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<LAER Type="Quad" ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
	OnCommand="hidden,1;diffuse,0,0,0,1;stretchto,0,0,sw,sh" />
	
	<LAER Type="ActorFrame" OnCommand="fov,45;hidden,1" InitCommand="%function(self) P1p = self end" ><children>
		<LAER Type="ActorProxy" GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('NoteField')) end end"/>
	</children></LAER>
	
	<LAER Type="ActorFrame" OnCommand="fov,45;hidden,1" InitCommand="%function(self) P2p = self end" ><children>
		<LAER Type="ActorProxy" GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('NoteField')) end end"/>
	</children></LAER>
	
	<LAER Type="ActorFrameTexture"
		InitCommand="%function(self)
			
			self:SetWidth( DISPLAY:GetDisplayWidth() );
			self:SetHeight( DISPLAY:GetDisplayHeight() );
			self:EnableDepthBuffer( false );
			self:EnableAlphaBuffer( true );
			self:EnableFloat( false );
			self:EnablePreserveTexture( true );
			
			self:hidden(0);
			
			self:Create();
			
			t_aft_tex = self;
			
		end"
	/>
	
	
	
	
	
	<LAER Type="Quad" ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
	OnCommand="hidden,1;diffuse,0,0,0,1;stretchto,0,0,sw,sh" />
	
	<LAER Type="ActorFrame" InitCommand="%function(self) t_sprites = self; end"
	OnCommand="fov,45;x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y"><children>
	<LAER Type="Sprite" Texture="white"
		ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
		InitCommand="blend,add;diffuse,1,0,0,1;hidden,1"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
			self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()))
		
			self:SetTexture(t_aft_tex:GetTexture());
			
			t_sprite_1 = self;
		end"
	/>
	<LAER Type="Sprite" Texture="white"
		ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
		InitCommand="blend,add;diffuse,0,1,0,1;hidden,1"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
			self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()))
		
			self:SetTexture(t_aft_tex:GetTexture());
			
			t_sprite_2 = self;
		end"
	/>
	<LAER Type="Sprite" Texture="white"
		ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
		InitCommand="blend,add;diffuse,0,0,1,1;hidden,1"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
			self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()))
		
			self:SetTexture(t_aft_tex:GetTexture());
			
			t_sprite_3 = self;
		end"
	/>
	</children></LAER>
	
	
	
	
	
	
	
	
	
	<ZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZLAER>
	<ZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZLAER>
	
	
	
	
	<CODE Type="Quad" OnCommand="hidden,1"
	ShareArrowsMessageCommand="%function(self)
		for pn=1,2 do
			local a = _G['P'..pn]
			if a then
				
			end
		end
	end"
	ReturnArrowsMessageCommand="%function(self)
	
	end"
	/>
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = mod_globaloffset + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
</children></ActorFrame>