<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20180617
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, mods will not work');
	end
	
	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/145 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function TiB(b)
		return (1/GAMESTATE:GetCurBPS()) * b
	end
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
	function Proxy(pn)
		return _G['P'..pn..'c']
	end
end"

><children><ActorFrame Condition="nitg_version"
OnCommand="%function(self)
	nvidia = false
	alphamult = 1
	if string.find(string.lower(PREFSMAN:GetPreference('LastSeenVideoDriver')), 'nvidia') or string.find(string.lower(DISPLAY:GetVendor()),'nvidia') then
		Trace('NVidia graphics driver detected.')
		Trace('AFT multiplier set to 0.9')
		nvidia = true
		alphamult = 0.9
	end
	if not string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl')
	or string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d')
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') 
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d') < 
	string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') then
		SCREENMAN:SystemMessage('D3D Video Renderer detected. Expect textures to fail.');
	end
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers" />
	<Layer File="easing" />
	<Layer File="chart2lua" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
			--function mod_ease(beat, len, start_strength, end_strength, mod, len_or_end, ease_type, pn, opt1, opt2)
				--insert mod into ease mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			--function modulo(a, b)
				--returns the remainder when a is divided by b, works properly with negatives unlike math.mod
				
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,292,'*2 2x,*-1 overhead,*-1 approachtype,*-1 dizzyholds,*-1 stealthpastreceptors,*-1 modtimer,*-1 cover,*-1 -100 drawsizeback','end'},
				{0,17, 'dark,*3 300 tipsy,*3 300 drunk,*3 confusion','end'},
				{0,34, '*99 50 tornado','end'},
				{34,42, 'dark,stealth,*5 1200 zoomx','end'},
				{42,1, '*-1 100 zoomx','len'},
				{72,82, '*0.1 50 flip,*0.1 25 distant','end'},
				--had to end zoomz here cuz transitions aaaaaaaaaa
				{82,1, '*-1 no rotationz,*-1 no confusionoffset,*-1 dark,*1.3 stealth,*1.3 0x,*-1 no zoomz','len'},
				{84,200, '*2 -1500 movex0,*2 -1500 movex2','end',1},
				{84,200, '*2 1500 movex1,*2 1500 movex3','end',2},
				{84,200, '*99 900 tandrunkspeed','end'},
				{98,98.5, '*2 dark,*2 stealth','end'},
				{106,114, '*3 dark,*3 stealth','end'},
				{118,1, '*3 100 zoomx','len'},
				{130,130.5, '*2 dark,*2 stealth','end'},
				{137,1, '*3 100 zoomx','len'},
				{144,4, 'no rotationx,no rotationy,no rotationz,*3 drunk,*3 tipsy,*0.5 stealth,*0.5 dark','len'},
				{162,162.5, '*2 dark,*2 stealth','end'},
				{170,178, '*3 dark,*3 stealth','end'},
				{182,1, '*4 100 zoomy','len'},
				{194,194.5, '*2 dark,*2 stealth','end'},
				{200,203, '*2 dark','end'},
				{200,202, '*2 -600 mini,*-1 no movex','end'},
				{202,218, '*99 0.5x','end'},
				{209,218, '*3 dark,*3 stealth','end'},
				{210,218, '*0.5 300 centered2','end'},
				{210,0.1, '*99 no dark,*99 no stealth','len'},
				{214,0.1, '*99 no dark,*99 no stealth','len'},
				{216,0.8, '*99 no dark,*99 no stealth','len'},
				{216,218, '*10 5000 tipsy','end'},
				{218,1, '*3 no centered2,*20 no tipsy','len'},
				{218,292, '*99 spiralholds,*99 gayholds,*99 1600 grain','end'},
				--aaaaaaaaaaaaaaaaaaa this hurts so much
				{206,1, '*4 flip,*8 314 confusionoffset','len'},
				{206.75,1, '*4 no flip,*8 no confusionoffset','len'},
				{207.5,1, '*4 flip,*8 314 confusionoffset','len'},
				{208.25,1, '*4 no flip,*8 no confusionoffset','len'},
				{262,1, '*4 flip,*8 314 confusionoffset','len'},
				{262.5,1, '*4 no flip,*8 no confusionoffset','len'},
				{263,1, '*4 flip,*8 314 confusionoffset','len'},
				{263.5,1, '*4 no flip,*8 no confusionoffset','len'},
				{278,1, '*4 flip,*8 314 confusionoffset','len'},
				{278.75,1, '*4 no flip,*8 no confusionoffset','len'},
				{279.5,1, '*4 flip,*8 314 confusionoffset','len'},
				{280.25,1, '*4 no flip,*8 no confusionoffset','len'},
				--
				{252,5, '*-1 no rotationy,*-1 no confusionyoffset','len'},
				{254,259, '*3 reverse3','end'},
				{254.5,259, '*3 reverse1','end'},
				{254.75,259, '*3 reverse2','end'},
				{255,259, '*3 reverse0','end'},
				{258,1, '*3 no reverse0','len'},
				{258.5,1, '*3 no reverse2','len'},
				{258.75,1, '*3 no reverse1','len'},
				{259,1, '*3 no reverse3','len'},
				{278,292, '*0.5 0.35x','end'},
				{282,292, 'dark,*0.35 400 centered2','end'},
				{286,0.1, '*99 no dark','len'},
				{288,1, '*99 no dark','len'},
				--addtional players' mods here
				{0,292, '*99 hidenoteflash,*99 dark,*99 stealth,*99 blind','end',3},
				{0,292, '*99 hidenoteflash,*99 dark,*99 stealth,*99 blind','end',4},
				--holy shit this is long lol
				{2,38, '*99 reverse,*99 155 tiny,*0.1 75 stealth,*99 no tornado,*99 -1200 zigzag,*99 1200 zigzagperiod,*99 -100 flip','end',3},
				{2,38, '*99 reverse,*99 155 tiny,*0.1 75 stealth,*99 no tornado,*99 1200 zigzag,*99 1200 zigzagperiod,*99 -100 flip','end',4},
				{106,115, '*99 centered,*99 -1000 tornado,*99 mini','end',3},
				{106,115, '*99 centered,*99 1000 tornado,*99 reverse,*99 mini','end',4},
				{170,178, '*99 centered,*99 -1000 tornado,*99 mini,*99 reverse','end',3},
				{170,178, '*99 centered,*99 1000 tornado,*99 mini','end',4},
				{200,292, '*99 no noteskew,*99 no confusion,*99 hide,*99 0x,*99 no tipsy,*99 no centered,*99 100 zoomy,*99 100 zoomx,*99 no flip,*99 no confusionoffset','end',3},
				{200,292, '*99 no noteskew,*99 no confusion,*99 hide,*99 0x,*99 no tipsy,*99 no centered,*99 100 zoomy,*99 100 zoomx,*99 no flip,*99 no confusionoffset','end',4},
				{200,292, '*99 no reverse0,*99 no reverse1,*99 no reverse2,*99 no reverse3','end',3},
				{200,292, '*99 no reverse0,*99 no reverse1,*99 no reverse2,*99 no reverse3','end',4}
				--addtional players' mods here
			}
			local m = mod_insert
			
			mod_spring(94,-200,50,'tantornadoz')
			
			mod_spring(98.5,-200,10,'invert')
			mod_spring(99,-200,15,'invert')
			mod_spring(98.5,200,10,'flip')
			mod_spring(99,200,15,'flip')
			
			mod_spring(126,-200,50,'tantornadoz')
			
			mod_spring(130.5,200,10,'invert')
			mod_spring(131,200,15,'invert')
			mod_spring(130.5,-200,10,'flip')
			mod_spring(131,-200,15,'flip')
			
			mod_wiggle(144,2,1,100,1,'digital')
			mod_spring(158,-200,50,'tantornadoz')
			
			mod_spring(162.5,-200,10,'invert')
			mod_spring(163,-200,15,'invert')
			mod_spring(162.5,200,10,'flip')
			mod_spring(163,200,15,'flip')
			
			mod_spring(190,-200,50,'tantornadoz')
			
			mod_spring(194.5,200,10,'invert')
			mod_spring(195,200,15,'invert')
			mod_spring(194.5,-200,10,'flip')
			mod_spring(195,-200,15,'flip')
			
			mod_spring(203,200,60,'mini')
			mod_spring(218,200,50,'drunk')
			mod_sugarkiller(230,2,2,55,75)
			mod_spring(237,600,25,'sawtooth')
			mod_spring(269,-600,25,'sawtooth')
			mod_sugarkiller(264.5,0.8,3,55,100)
			mod_sugarkiller(270,2,1,55,75)
			mod_spring(288,600,70,'tipsy')
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{0, 4, 360, 0, 'rotationz', 'len', inOutBack},
				{40, 68, -750, 0, 'drunkz', 'end', linear},
				{72, 81, 0, 6000, 'zoomz', 'end', inOutSine},
				{84, 88, 1000, 0, 'tandrunk', 'end', outElastic},
				
				{88, 90, 0, 150, 'noteskew', 'end', outExpo, 1},
				{88, 90, 0, -150, 'noteskew', 'end', outExpo, 2},
				{89, 90, 0, -150, 'noteskew', 'end', outExpo, 1},
				{89, 90, 0, 150, 'noteskew', 'end', outExpo, 2},
				
				{92, 94, 0, 200, 'distant', 'end', outSine},
				{100, 104, -1000, 0, 'tandrunk', 'end', outElastic},
				
				{106, 116, 800, 0, 'drunkz', 'end', linear, 1},
				{106, 116, -800, 0, 'drunkz', 'end', linear, 2},
				
				{116, 120, 1000, 0, 'tandrunk', 'end', outElastic},
				{116, 118, 100, 500, 'zoomx', 'end', outSine},
				
				{120, 122, 0, -150, 'noteskew', 'end', outExpo, 1},
				{120, 122, 0, 150, 'noteskew', 'end', outExpo, 2},
				{121, 122, 0, 150, 'noteskew', 'end', outExpo, 1},
				{121, 122, 0, -150, 'noteskew', 'end', outExpo, 2},
				
				{124, 126, 0, 200, 'hallway', 'end', outSine},
				{128.75, 130, 400, 100, 'zoomx', 'end', outExpo},
				{129.5, 131, 400, 100, 'zoomx', 'end', outExpo},
				{130, 1, 400, 0, 'tipsy', 'len', outQuad},
				{136, 137, 0, 400, 'zoomx', 'end', inOutSine},
				{148, 152, -1000, 0, 'tandrunk', 'end', outElastic},
				
				{152, 154, 0, 150, 'noteskew', 'end', outExpo, 1},
				{152, 154, 0, -150, 'noteskew', 'end', outExpo, 2},
				{153, 154, 0, -150, 'noteskew', 'end', outExpo, 1},
				{153, 154, 0, 150, 'noteskew', 'end', outExpo, 2},
				
				{156, 158, 0, 200, 'distant', 'end', outSine, 1},
				{156, 158, 0, 200, 'hallway', 'end', outSine, 2},
				
				{164, 168, 1000, 0, 'tandrunk', 'end', outElastic},
				
				{170, 179, -800, 0, 'drunkz', 'end', linear, 1},
				{170, 179, 800, 0, 'drunkz', 'end', linear, 2},
				
				{180, 184, -1000, 0, 'tandrunk', 'end', outElastic},
				{180, 182, 100, 600, 'zoomy', 'end', outSine},
				
				{184, 186, 0, -150, 'noteskew', 'end', outExpo, 1},
				{184, 186, 0, 150, 'noteskew', 'end', outExpo, 2},
				{185, 186, 0, 150, 'noteskew', 'end', outExpo, 1},
				{185, 186, 0, -150, 'noteskew', 'end', outExpo, 2},
				
				{188, 190, 0, 200, 'hallway', 'end', outSine, 1},
				{188, 190, 0, 200, 'distant', 'end', outSine, 2},
				
				{192.75, 194, 400, 100, 'zoomx', 'end', outExpo},
				{193.5, 195, 400, 100, 'zoomx', 'end', outExpo},
				{194, 1, -400, 0, 'tipsy', 'len', outQuad},
				{209, 0.3, 200, 0, 'confusion', 'len', outQuad},
				{234, 237, 0, 2, 'xmod', 'end', outQuad},
				{281, 0.3, -200, 0, 'confusion', 'len', outQuad},
			}
			
			--beat-based ease functions
			--{beat_start, beat_end, mod_start, mod_end, mod_function, len_or_end, ease_type, sustainbeats, optional_param1, optional_param2}
			--mod_function gets passed a number as a parameter which can then be used to manipulate 
			funcs_ease = {
				-- EXAMPLE TWEEN: from beat 4 to 8, rotate topscreen from 360 to 0 with the outBack tween
				--{4, 4, 360, 0, function(a) SCREENMAN:GetTopScreen():rotationz(a) end, 'len', outBack},
				{106, 114, 65, 0, function(a)
					if P1 then
						P1:wag()
						P1:effectmagnitude(0,a,0)
						P1:effectperiod(3)
					end
					if P2 then
						P2:wag()
						P2:effectmagnitude(0,-a,0)
						P2:effectperiod(3)
					end
				end, 'end', linear},
				{170, 179, 65, 0, function(a)
					if P1 then
						P1:wag()
						P1:effectmagnitude(0,a,0)
						P1:effectperiod(3)
					end
					if P2 then
						P2:wag()
						P2:effectmagnitude(0,-a,0)
						P2:effectperiod(3)
					end
				end, 'end', linear},
				{242, 252, 45, 0, function(a)
					if P1 then
						P1:wag()
						P1:effectmagnitude(0,0,a)
						P1:effectperiod(3)
					end
					if P2 then
						P2:wag()
						P2:effectmagnitude(0,0,a)
						P2:effectperiod(3)
					end
				end, 'end', linear}
			}
			
			local m_ea = mod_ease
			
			below_drunkVal = 200
			for i = 1,table.getn(below_blinkingpart) do
				local beat = below_blinkingpart[i]
				m_ea(beat[1], 0.3, 55, 0, 'stealth', 'len', outQuad)
			end
			
			for i = 1,table.getn(below_drunkNtipsy) do
				local beat = below_drunkNtipsy[i]
				m_ea(beat[1], 1, below_drunkVal, 0, 'drunk', 'len', outQuad)
				m_ea(beat[1], 1, below_drunkVal, 0, 'tipsy', 'len', outQuad)
				below_drunkVal = -below_drunkVal
			end
			
			for i = 1,table.getn(below_tatata) do
				local beat = below_tatata[i]
				m_ea(beat[1], 0.3, below_drunkVal/3, 0, 'confusionoffset', 'len', outQuad)
				below_drunkVal = -below_drunkVal
			end
			
			for i = 1,table.getn(below_randomrotations) do
				local beat = below_randomrotations[i]
				m(beat[1], 1, '*2 '..math.random(-45,45)..' rotationx,*2 '..math.random(-45,45)..' rotationy,*2 '..math.random(-25,25)..' rotationz','len',1)
				m(beat[1], 1, '*2 '..math.random(-45,45)..' rotationx,*2 '..math.random(-45,45)..' rotationy,*2 '..math.random(-25,25)..' rotationz','len',2)
			end
			
			for i = 1,table.getn(below_rotFusion) do
				local beat = below_rotFusion[i]
				m_ea(beat[1], 0.3, below_drunkVal, 0, 'confusion', 'len', outQuad)
				m_ea(beat[1], 1, below_drunkVal/4, 0, 'rotationz', 'len', outBounce)
				m_ea(beat[1], 1, -800, 0, 'tiny', 'len', outQuad)
				below_drunkVal = -below_drunkVal
			end
			
			for i = 1,table.getn(below_Nyoom) do
				local beat = below_Nyoom[i]
				m_ea(beat[1], 2, 100, 0, 'zoomy', 'len', outSine)
				m_ea(beat[1], 1, 100, 300, 'zoomx', 'len', outSine)
			end
			
			for i = 1,table.getn(below_randomY) do
				local beat = below_randomY[i]
				m(beat[1], 0.7, '*3 '..math.random(5,45)..' reverse0','len')
				m(beat[1], 0.7, '*3 '..math.random(5,45)..' reverse1','len')
				m(beat[1], 0.7, '*3 '..math.random(5,45)..' reverse2','len')
				m(beat[1], 0.7, '*3 '..math.random(5,45)..' reverse3','len')
			end
			
			below_poof={{84,200},{220,281}}
			
			for i,v in pairs(below_poof) do
				for beat=v[1],v[2],4 do
					m_ea(beat, 0.5, 55, 0, 'stealth', 'len', outQuad)
					m_ea(beat, 1, -500, 0, 'tinyy', 'len', outQuad)
				end
			end
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 0
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,'GetProxy',true},
				{0,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:GetChild('Judgment'):hidden(1)
							a:GetChild('Combo'):hidden(1)
						end
					end
					
					for pn=1,2 do
						local d = 0.25; if pn == 2 then d = 0.75 end
						local b = _G['jud'..pn..'p']
						if b then
							b:hidden(0);
							b:basezoomx(0.75);
							b:basezoomy(0.75);
							b:x(SCREEN_WIDTH*d)
							b:y(SCREEN_HEIGHT*0.5)
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(0);
							c:basezoomx(0.75);
							c:basezoomy(0.75);
							c:x(SCREEN_WIDTH*d)
							c:y(SCREEN_HEIGHT*0.5)
						end
					end
				end,true},
				{0,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
						end
					end
				end,true},
				{0, function()
					if P3 then
						P3:SetAwake(true)
						P3:SetNoteDataFromLua(below_addPlrs)
					end
					if P4 then
						P4:SetAwake(true)
						P4:SetNoteDataFromLua(below_addPlrs)
					end
				end,true},
				{2, 'snow',true},
				{16, 'snowWoa',true},
				{17, 'snow',true},
				{34, 'woa',true},
				{38, 'Hide',true},
				{66, 'WhiteFlash',true},
				{66, 'VibbIncr',true},
				{66, 'RotIncr',true},
				{66, 'SlowlyAppear',true},
				{202, 'HideShade',true},
				{242, 'Spin',true},
			}
			local mm = mod_message
			
			for i = 1,table.getn(below_vibbSrc) do
				local beat = below_vibbSrc[i]
				mm(beat[1], 'vibbScr')
			end
			
			for i = 1,table.getn(below_stopVibbScr) do
				local beat = below_stopVibbScr[i]
				mm(beat[1], 'vibbScrEnd')
			end
			
			for i = 1,table.getn(below_woa) do
				local beat = below_woa[i]
				mm(beat[1], 'Beat')
				m_ea(beat[1], 2, 55, 100, 'stealth', 'len', outQuad, 3)
				m_ea(beat[1], 2, 55, 100, 'stealth', 'len', outQuad, 4)
				m(beat[1],1, '*99 no hide','len',3)
				m(beat[1],1, '*99 no hide','len',4)
				m(beat[1],2, '*99 '..math.random(-300,300)..' movex0,*99 '..math.random(-300,300)..' movex1,*99 '..math.random(-300,300)..' movex2,*99 '..math.random(-300,300)..' movex3','len',3)
				m(beat[1],2, '*99 '..math.random(-300,300)..' movex0,*99 '..math.random(-300,300)..' movex1,*99 '..math.random(-300,300)..' movex2,*99 '..math.random(-300,300)..' movex3','len',4)
				m(beat[1],2, '*99 '..math.random(200,600)..' movey0,*99 '..math.random(200,600)..' movey1,*99 '..math.random(200,600)..' movey2,*99 '..math.random(200,600)..' movey3','len',3)
				m(beat[1],2, '*99 '..math.random(200,600)..' movey0,*99 '..math.random(200,600)..' movey1,*99 '..math.random(200,600)..' movey2,*99 '..math.random(200,600)..' movey3','len',4)
				m_ea(beat[1], 1, -500, 0, 'tiny', 'len', outQuad)
				m_ea(beat[1], 2, below_drunkVal/5, 0, 'rotationz', 'len', outQuad, 1)
				m_ea(beat[1], 2, -below_drunkVal/5, 0, 'rotationz', 'len', outQuad, 2)
				m_ea(beat[1], 2, 500, 0, 'spiralx', 'len', outElastic, 1)
				m_ea(beat[1], 2, -500, 0, 'spiralx', 'len', outElastic, 2)
				below_drunkVal = -below_drunkVal
			end
			
			for i = 1,table.getn(below_ShortWoa) do
				local beat = below_ShortWoa[i]
				mm(beat[1], 'ShortBeat')
				m_ea(beat[1], 2, 55, 100, 'stealth', 'len', outQuad, 3)
				m_ea(beat[1], 2, 55, 100, 'stealth', 'len', outQuad, 4)
				m(beat[1],1, '*99 no hide','len',3)
				m(beat[1],1, '*99 no hide','len',4)
				m(beat[1],2, '*99 '..math.random(-300,300)..' movex0,*99 '..math.random(-300,300)..' movex1,*99 '..math.random(-300,300)..' movex2,*99 '..math.random(-300,300)..' movex3','len',3)
				m(beat[1],2, '*99 '..math.random(-300,300)..' movex0,*99 '..math.random(-300,300)..' movex1,*99 '..math.random(-300,300)..' movex2,*99 '..math.random(-300,300)..' movex3','len',4)
				m(beat[1],2, '*99 '..math.random(200,600)..' movey0,*99 '..math.random(200,600)..' movey1,*99 '..math.random(200,600)..' movey2,*99 '..math.random(200,600)..' movey3','len',3)
				m(beat[1],2, '*99 '..math.random(200,600)..' movey0,*99 '..math.random(200,600)..' movey1,*99 '..math.random(200,600)..' movey2,*99 '..math.random(200,600)..' movey3','len',4)
				m_ea(beat[1], 1, -500, 0, 'tiny', 'len', outQuad)
				m_ea(beat[1], 2, below_drunkVal/5, 0, 'rotationz', 'len', outQuad, 1)
				m_ea(beat[1], 2, -below_drunkVal/5, 0, 'rotationz', 'len', outQuad, 2)
				below_drunkVal = -below_drunkVal
			end
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
				
				----------------------
				-- grab everything? --
				----------------------
				if SCREENMAN:GetTopScreen():GetChild('LifeP1') then LifeP1 = SCREENMAN:GetTopScreen():GetChild('LifeP1') end
				if SCREENMAN:GetTopScreen():GetChild('LifeP2') then LifeP2 = SCREENMAN:GetTopScreen():GetChild('LifeP2') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP1') then ScoreP1 = SCREENMAN:GetTopScreen():GetChild('ScoreP1') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP2') then ScoreP2 = SCREENMAN:GetTopScreen():GetChild('ScoreP2') end
				if SCREENMAN:GetTopScreen():GetChild('BPMDisplay') then BPMDisplay = SCREENMAN:GetTopScreen():GetChild('BPMDisplay') end
				if SCREENMAN:GetTopScreen():GetChild('LifeFrame') then LifeFrame = SCREENMAN:GetTopScreen():GetChild('LifeFrame') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreFrame') then ScoreFrame = SCREENMAN:GetTopScreen():GetChild('ScoreFrame') end
				if SCREENMAN:GetTopScreen():GetChild('Lyrics') then Lyrics = SCREENMAN:GetTopScreen():GetChild('Lyrics') end
				if SCREENMAN:GetTopScreen():GetChild('SongForeground') then SongForeground = SCREENMAN:GetTopScreen():GetChild('SongForeground') end
				if SCREENMAN:GetTopScreen():GetChild('SongBackground') then SongBackground = SCREENMAN:GetTopScreen():GetChild('SongBackground') end
				if SCREENMAN:GetTopScreen():GetChild('Overlay') then Overlay = SCREENMAN:GetTopScreen():GetChild('Overlay') end
				if SCREENMAN:GetTopScreen():GetChild('Underlay') then Underlay = SCREENMAN:GetTopScreen():GetChild('Underlay') end
				
				--------------------------
				-- hide everything? y/n --
				--------------------------
				mod_hideall = true;
				if mod_hideall == true then
					if LifeFrame then LifeFrame:hidden(1) end
					if LifeP1 then LifeP1:hidden(1) end
					if LifeP2 then LifeP2:hidden(1) end
					if ScoreP1 then ScoreP1:hidden(1) end
					if ScoreP2 then ScoreP2:hidden(1) end
					if BPMDisplay then BPMDisplay:hidden(1) end
					if Overlay then Overlay:hidden(1) end
					if Underlay then Underlay:hidden(1) end
					if ScoreFrame then ScoreFrame:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
				P3 = SCREENMAN:GetTopScreen():GetChild('PlayerP3');
				P4 = SCREENMAN:GetTopScreen():GetChild('PlayerP4');
				
				if P1 then
					jud1 = P1:GetChild('Judgment');
					com1 = P1:GetChild('Combo');
					--P1:x(SCREEN_CENTER_X);
				end
				if P2 then
					jud2 = P2:GetChild('Judgment');
					com2 = P2:GetChild('Combo');
					--P2:x(SCREEN_CENTER_X);
				end
				
				if P3 then
					P3:hidden(0)
					P3:GetChild('Judgment'):hidden(1)
				end
				if P4 then
					P4:hidden(0)
					P4:GetChild('Judgment'):hidden(1)
				end

				screen = SCREENMAN:GetTopScreen();
				checked = true;
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						GAMESTATE:ApplyGameCommand('mod,clearall',i)
						if _G['init_modsp'..i] then 
							GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
						end
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
									else
										GAMESTATE:ApplyGameCommand('mod,'..v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				-------------------------------------------------------------
				-- exschwasion presents ease mod reader v2.5, compact mode --
				-------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									local strength = v[7](beat - v[1], v[3], v[4] - v[3], v[6] == 'end' and v[2] - v[1] or v[2], v[10], v[11])
									local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
									GAMESTATE:ApplyGameCommand('mod,*-1 '..modstr,v[8]);
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
									local modstr = v[5] == 'xmod' and v[4]..'x' or (v[5] == 'cmod' and 'C'..v[4] or v[4]..' '..v[5])
									GAMESTATE:ApplyModifiers('*-1 '..modstr,v[8]);
								end
							end
						else
							SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
						end
					end
				end
				
				---------------------------------------------------
				-- ease function reader, thanks melody and hal   --
				---------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then
					local t = {}
					for i,v in pairs(funcs_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									local strength = v[7](beat - v[1], v[3], v[4] - v[3], v[6] == 'end' and v[2] - v[1] or v[2], v[9], v[10])
									v[5](strength)
								elseif (v[8] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[8]) or (v[6] == 'end' and beat <=v[8]))) then
									v[5](v[4])
								end
							end
							table.insert(t,v)
						else
							SCREENMAN:SystemMessage('Bad mod in beat-based ease function table (line '..i..')');
						end
					end
					funcs_ease = t
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				if beat > 66 and beat < 82 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:vibrate();
							a:effectmagnitude(auxvar:getaux(),auxvar:getaux(),auxvar:getaux());
						end
					end
					GAMESTATE:ApplyGameCommand('mod,*10000 '..(-100*math.rad(auxv:GetX()))..' confusionoffset')
					GAMESTATE:ApplyGameCommand('mod,*10000 '..((auxv:GetX()))..' rotationz')
				end
				
				if perframe(106,114) or perframe(170,178) then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*3)*55 ..'% stealth0');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi*3)*55 ..'% stealth1');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*3)*55 ..'% stealth2');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi*3)*55 ..'% stealth3');
				end
				
				if perframe(90,94) or perframe(154,158) or perframe(122,126) or perframe(186,190) or perframe(260.5,262) then
					local pos = beat - 0.5
					GAMESTATE:ApplyGameCommand('mod,*100000 '..(50*math.sin(pos*math.pi)+50)..' flip');
					GAMESTATE:ApplyGameCommand('mod,*100000 '..(36*math.cos((pos*math.pi)+math.pi))..' reverse');
					GAMESTATE:ApplyGameCommand('mod,*100000 '..(48*math.cos(pos*math.pi))..' split');
					GAMESTATE:ApplyGameCommand('mod,*100000 '..(24*math.cos(pos*math.pi))..' alternate');
				end
				
				if perframe(102,103) or perframe(166,167) then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*3)*600 ..'% square');
				end
				
				if perframe(104.5,106) or perframe(168.5,170) then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*3)*100 ..'% skewx');
				end
				
				if beat > 242 and beat < 252 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..(-100*math.rad(auxv:GetX()))..' confusionyoffset',1)
					GAMESTATE:ApplyGameCommand('mod,*10000 '..((auxv:GetX()))..' rotationy',1)
					GAMESTATE:ApplyGameCommand('mod,*10000 '..(-100*math.rad(auxv:GetX()))..' confusionyoffset',2)
					GAMESTATE:ApplyGameCommand('mod,*10000 '..((auxv:GetX()))..' rotationy',2)
				end
				
				if perframe(220,221) or perframe(252,253) then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*2)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi*2)*50+50 ..'% Invert');
				end
				---------------------------------------
				-- Actions table --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<Layer
		Type="Quad"
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
        VibbIncrMessageCommand="finishtweening;aux,0;linear,2;aux,75;linear,4.1;aux,0"/>
		
	<Layer
		Type="Quad"
		InitCommand="%function(self) auxv = self; self:hidden(1) end"
		RotIncrMessageCommand="finishtweening;x,0;accelerate,7.5;x,360*25"
		SpinMessageCommand="finishtweening;x,0;linear,(m_bl)*10;x,360*5"
	/>
		
	<Layer
		Type="Quad"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,0,0,0,0"
		WhiteFlashMessageCommand="finishtweening;diffuse,1,1,1,1;linear,0.6;diffusealpha,0"
	/>
	
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZZLAER>
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZZLAER>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	vibbScrMessageCommand="%function(self)
			local screen = SCREENMAN:GetTopScreen();
			screen:vibrate()
			screen:effectmagnitude(20, 20, 20)
	end"
	vibbScrEndMessageCommand="%function(self)
			local screen = SCREENMAN:GetTopScreen();
			screen:stopeffect()
	end"
	/>
	
	<Layer
Type="Sprite"
Texture="transparent.png"
OnCommand="%function(self)
self:x(SCREEN_CENTER_X)
self:y(SCREEN_CENTER_Y)
self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()));
self:diffusealpha(0)
self:zoom(1)
self:queuecommand('renderMe');
end"

renderMeCommand="%function(self)
self:zoom(1.05)
self:SetTexture(myAft:GetTexture())
self:blend('add')
end"
BeatMessageCommand="diffusealpha,0.6*alphamult;decelerate,TiB(2);diffusealpha,0"
ShortBeatMessageCommand="diffusealpha,0.4*alphamult;decelerate,TiB(1);diffusealpha,0"
HideMessageCommand="diffusealpha,0;blend,normal;zoom,1.05"
woaMessageCommand="diffusealpha,0.95;blend,add;zoom,1.05"
snowMessageCommand="zoom,1;diffusealpha,0.75;blend,add"
snowWoaMessageCommand="zoom,1;diffusealpha,1;blend,add"
/>


        <Layer
Type="ActorFrameTexture"
OnCommand="%function(self)

    self:SetWidth(DISPLAY:GetDisplayWidth());
    self:SetHeight(DISPLAY:GetDisplayHeight());
    self:EnableDepthBuffer( false );
    self:EnableAlphaBuffer( true );
    self:EnableFloat( false );
    self:EnablePreserveTexture( true );
    self:hidden(0);
    self:diffusealpha(1);
    self:zoom(0.6)
    self:Create();
    myAft=self
end"
/>

	<Layer
		Type="Sprite"
		Frag="Shaders/Vivid light.frag"
		OnCommand="%function(self) 
			below_ShaderA = self; 
			self:xy(SCREEN_CENTER_X, SCREEN_CENTER_Y);
			self:blend('weightedmultiply')
			self:basezoomx(SCREEN_WIDTH/DISPLAY:GetDisplayWidth());
			self:basezoomy(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()*-1);
			self:SetTexture(myAft:GetTexture());
			self:diffusealpha(0)
		end"
		HideShadeMessageCommand="diffusealpha,0"
		SlowlyAppearMessageCommand="linear,10;diffusealpha,1"
	/>
	
</children></ActorFrame>