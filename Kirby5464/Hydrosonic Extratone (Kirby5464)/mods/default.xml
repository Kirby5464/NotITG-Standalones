<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20180617
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, mods will not work');
	end
	
	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/145 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
	function Proxy(pn)
		return _G['P'..pn..'c']
	end
end"

><children><ActorFrame Condition="nitg_version"
OnCommand="%function(self)
	nvidia = false
	alphamult = 1
	if string.find(string.lower(PREFSMAN:GetPreference('LastSeenVideoDriver')), 'nvidia') or string.find(string.lower(DISPLAY:GetVendor()),'nvidia') then
		Trace('NVidia graphics driver detected.')
		Trace('AFT multiplier set to 0.9')
		nvidia = true
		alphamult = 0.9
	end
	if not string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl')
	or string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d')
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') 
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d') < 
	string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') then
		SCREENMAN:SystemMessage('D3D Video Renderer detected. Expect textures to fail.');
	end
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers" />
	<Layer File="easing" />
	<Layer File="chart2lua" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
			--function mod_ease(beat, len, start_strength, end_strength, mod, len_or_end, ease_type, pn, sustain, opt1, opt2)
				--insert mod into ease mods table
			--function func_ease(beat, len, start_strength, end_strength, mod, len_or_end, ease_type, sustain, opt1, opt2)
				--insert mod into ease functions table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			--function mod_bounce(beat,length,start,apex,mod,ease_type,pn)
			--function func_bounce(beat,length,start,apex,function,ease_type)
				--eases out from start to apex, then eases back in from apex to start
				--ease_type should be a string, i.e. 'Quad', 'Cubic', 'Circ'
			
			
			
			--function modulo(a, b)
				--returns the remainder when a is divided by b, works properly with negatives unlike math.mod
			
			--function randomXD(t)
				--returns a pseudo-random number between 0 and 1 seeded based on the given argument
				--returns 0.5 if t is 0 (useful sometimes!)
				
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,612,'*2 1.2x,*-1 overhead,*-1 approachtype,*-1 dizzyholds,*-1 stealthpastreceptors,*-1 modtimer,*-1 -100 drawsizeback,*-1 cover','end'},
				{0,56, '*99 dark,*99 stealth','end'},
				{0,52, '*99 centered,*99 0x','end',1},
				{0,52, '*99 centered,*99 0x','end',2},
				{56,65, '*4 -5000 tiny','end'},
				{64,96, '*99 spiralx,*99 no tiny,*99 arrowpath','end'},
				{96,124, '*99 25 tandrunk,*99 300 tandrunkspeed','end'},
				{120,124, '*99 blink','end'},
				{124,128, '*2 stealth,*2 dark','end'},
				{142,144, '*99 50 tandrunk,*99 300 tandrunkspeed','end'},
				{152,156, '*99 200 tandrunkz,*99 300 tandrunkzspeed','end'},
				{157,158, '*4 split','end'},
				{158,188, '*4 reverse,*8 no split','end'},
				{176,188, '*0.2 200 mini','end'},
				{188,1, '*99 no mini','len'},
				{226,230, '*7 reverse','end'},
				{230,234, '*7 no reverse','end'},
				{234,238, '*7 reverse','end'},
				{238,2, '*7 no reverse','len'},
				{240,251, '*0.2 400 centered,*0.2 200 mini','end'},
				{251,2, '*99 no centered,*99 no mini','len'},
				{251,253, '*99 dark,*99 stealth','end'},
				{253,366, '*5 -1500 movex0,*5 -1500 movex2','end',1},
				{253,366, '*5 1500 movex1,*5 1500 movex3','end',2},
				{308,320, '*0.1 stealth,*0.25 200 tiny,*0.5 0.5x','end'},
				{320,2, '*99 no tiny','len'},
				{366,3, '*99 no movex0,*99 no movex2','len',1},
				{366,3, '*99 no movex1,*99 no movex3','len',2},
				{382.5,448, 'centered','end'},
				{384.5,436, '*99 split,1.6x,*5 55 drunk','end',1},
				{384.5,436, '*99 split,*99 reverse,1.6x,*5 -55 drunk','end',2},
				
				{384.5,400, '*0.2 55 stealth0,*0.2 stealth1,*0.2 55 stealth2,*0.2 stealth3','end',1},
				{384.5,400, '*0.2 stealth0,*0.2 55 stealth1,*0.2 stealth2,*0.2 55 stealth3','end',2},
				{400,417, '*0.2 stealth0,*0.2 55 stealth1,*0.2 stealth2,*0.2 55 stealth3','end',1},
				{400,417, '*0.2 55 stealth0,*0.2 stealth1,*0.2 55 stealth2,*0.2 stealth3','end',2},
				{417,436, '*0.2 55 stealth0,*0.2 stealth1,*0.2 55 stealth2,*0.2 stealth3','end',1},
				{417,436, '*0.2 stealth0,*0.2 55 stealth1,*0.2 stealth2,*0.2 55 stealth3','end',2},
				
				{448,508, '*5 -50 flip','end'},
				{448,508, '*5 -50 movex','end',1},
				{448,508, '*5 50 movex','end',2},
				{513,519, '*0.125 75 rotationz,*0.125 185 mini','end'},
				{519,520, '*99 hide','end'},
				{521,526, '*0.125 -75 rotationz,*0.125 185 mini','end'},
				{528,529, '*99 hide','end'},
				{530,536, '*0.125 75 rotationz,*0.125 185 mini','end'},
				{536,537, '*99 hide','end'},
				{538,540, '*0.25 -75 rotationz,*0.25 185 mini','end'},
				{544.5,572, '*5 25 tandrunk,*99 300 tandrunkspeed,*5 25 tantipsy,*99 300 tantipsyspeed,*99 tandrunkz,*99 8000 tandrunkzspeed,*99 25 spiralx','end'},
				{575,577, '*2 dark,*2 stealth','end'},
				{575,612, '*2 50 flip,*2 centered,*2 split,*99 mini,*99 -800 tiny,*99 2.4x,*99 dark,*99 arrowpath,*99 1337 arrowpathwidth,*99 hidemines','end'},
				{590,593.75, '*5 85 hidemines','end'},
				{606.5,612, '*2 no arrowpath','end'},
				--additional players' mods here
				{36,56, '0.01x,*99 3000 longholds,*0.01 95 stealth,*0.1 stealthgr,*99 hidemines,*99 hidenoteflash,*99 300 tornadoz,*99 -300 cubicz','end',3},
				{36,56, '0.01x,*99 3000 longholds,*0.01 95 stealth,*0.1 stealthgr,*99 hidemines,*99 hidenoteflash,*99 300 tornadoz,*99 -300 cubicz','end',4},
				{56,612, '*99 hide,*99 blind','end',3},
				{56,612, '*99 hide,*99 blind','end',4},
				--additional players' mods here
			}
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				{0, 4, -360, 0, 'tiny', 'end', outElastic},
				{32, 36, -360, 0, 'tinyx', 'end', outElastic},
				{64, 65, 6900, 0, 'beat', 'end', outElastic},
				{64, 65, 500, 0, 'spiralx', 'end', outElastic},
				{64, 96, 1.2, 0.5, 'xmod', 'end', inSine},
				{135.5, 136.5, 75, 0, 'tandrunk', 'end', outQuad},
				{188, 190, -2000, 0, 'tiny', 'end', outSine},
				{188, 189, 628, 0, 'confusion', 'end', outQuad},
				{188, 2, 100, 0, 'stealth', 'len', outQuad},
				{188, 2, 100, 0, 'stealthgr', 'len', outQuad},
				{426, 1, 800, 0, 'tipsy', 'len', outBounce},
				{429, 1, -800, 0, 'tipsy', 'len', outBounce},
				{508, 510, -2000, 0, 'tiny', 'end', outSine},
				{508, 510, 628, 0, 'confusion', 'end', outQuad},
				{508, 2, 100, 0, 'stealth', 'len', outQuad},
				{508, 2, 100, 0, 'stealthgr', 'len', outQuad},
				{543.5, 546, 1000, 100, 'zoomx', 'end', outExpo},
				{550, 552, -500, 0, 'tiny', 'end', outQuad},
				{556, 558, -500, 0, 'tiny', 'end', outQuad},
				{568, 570, -500, 0, 'tiny', 'end', outQuad}
			}
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 0
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,'GetProxy',true},
				{0,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:GetChild('Judgment'):hidden(1)
							a:GetChild('Combo'):hidden(1)
							--
							a:NoClearSplines(true)
						end
					end
					
					for pn=1,2 do
						local d = 0.25; if pn == 2 then d = 0.75 end
						local b = _G['jud'..pn..'p']
						if b then
							b:hidden(0);
							b:basezoomx(0.75);
							b:basezoomy(0.75);
							b:x(SCREEN_WIDTH*d)
							b:y(SCREEN_HEIGHT*0.5)
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(0);
							c:basezoomx(0.75);
							c:basezoomy(0.75);
							c:x(SCREEN_WIDTH*d)
							c:y(SCREEN_HEIGHT*0.5)
						end
					end
				end,true},
				{36, function()
					if P3 then
						P3:SetAwake(true)
					end
					if P4 then
						P4:SetAwake(true)
					end
				end,true},
				{56, 'SlowlyAppearRed',true},
				{64, 'Hide',true},
				{65, 'SlowlyAppearAFT',true},
				{96, 'SlowlyHideAFT',true},
				{96, 'SlowlyAppearMix',true},
				{124, function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:linear(0.25)
							a:x(SCREEN_CENTER_X)
						end
					end
				end,true},
				--i know that i could easily write a loop out of this but atm i'm not too bothered with it...
				{128, 'vibb',true},
				{157, 'vibbEnd',true},
				{160, 'vibb',true},
				{176, 'vibbEnd',true},
				{192, 'vibb',true},
				{223, 'vibbEnd',true},
				{256, 'vibb',true},
				{284, 'vibbEnd',true},
				{288, 'vibb',true},
				{303, 'vibbEnd',true},
				{304, 'vibb',true},
				{319, 'vibbEnd',true},
				{320, 'vibb',true},
				{335, 'vibbEnd',true},
				{336, 'vibb',true},
				{349, 'vibbEnd',true},
				{352, 'vibb',true},
				{359, 'vibbEnd',true},
				{360, 'vibb',true},
				{366, 'vibbEnd',true},
				{513, 'vibbScr',true},
				{519, 'vibbEnd',true},
				{521, 'vibbScr',true},
				{526, 'vibbEnd',true},
				{530, 'vibbScr',true},
				{536, 'vibbEnd',true},
				{538, 'vibbScr',true},
				{540, 'vibbEnd',true},
				{577, 'Spin',true},
				{575, function()
					if P1 then
						--P1:NoClearSplines(true)
						P1:SetXSpline(1,0,-600,200,2)
						P1:SetYSpline(1,0,-20,1,5)
						P1:SetXSpline(1,1,-600,200,2)
						P1:SetYSpline(1,1,-20,1,5)
						P1:SetXSpline(1,2,600,200,2)
						P1:SetYSpline(1,2,20,1,5)
						P1:SetXSpline(1,3,600,200,2)
						P1:SetYSpline(1,3,20,1,5)
					end
					if P2 then
						--P2:NoClearSplines(true)
						P2:SetXSpline(1,0,600,200,2)
						P2:SetYSpline(1,0,-20,1,5)
						P2:SetXSpline(1,1,600,200,2)
						P2:SetYSpline(1,1,-20,1,5)
						P2:SetXSpline(1,2,-600,200,2)
						P2:SetYSpline(1,2,20,1,5)
						P2:SetXSpline(1,3,-600,200,2)
						P2:SetYSpline(1,3,20,1,5)
					end
				end,true},
				{590, 'AppearRed',true},
				{594, 'Hide',true}
			}
			
			mod_spring(64,300,700,'invert')
			mod_spring(448.5,250,300,'distant')
			mod_spring(462,250,300,'hallway')
			mod_spring(476,250,300,'space')
			mod_spring(494,250,300,'incoming')
			switcheroo_add(176,'invert',2,2)
			switcheroo_add(178,'urld',2,2)
			switcheroo_add(180,'flip',2,2)
			switcheroo_add(182,'invert',2,2)
			switcheroo_add(184,'urld',2,2)
			switcheroo_add(186,'drlu',2,2)
			switcheroo_add(188,'normal',2,2)
			switcheroo_add(240,'drlu',2,2)
			switcheroo_add(242,'invert',2,2)
			switcheroo_add(244,'urld',2,2)
			switcheroo_add(246,'flip',2,2)
			switcheroo_add(248,'invert',2,2)
			switcheroo_add(250,'normal',2,2)
			
			local m, m_ea, mm = mod_insert, mod_ease, mod_message
			
			for beat=0,52,8 do
				m_ea(beat, 2, 75, 100, 'stealth', 'len', outQuad, 1)
				m_ea(beat, 2, 75, 100, 'stealth', 'len', outQuad, 2)
				m_ea(beat, 2, 100, 0, 'stealthgr', 'len', outQuad, 1)
				m_ea(beat, 2, 100, 0, 'stealthgr', 'len', outQuad, 2)
				m(beat,2, '*99 '..math.random(-100,100)..' movex0,*99 '..math.random(-100,100)..' movex1,*99 '..math.random(-100,100)..' movex2,*99 '..math.random(-100,100)..' movex3','len',1)
				m(beat,2, '*99 '..math.random(-100,100)..' movex0,*99 '..math.random(-100,100)..' movex1,*99 '..math.random(-100,100)..' movex2,*99 '..math.random(-100,100)..' movex3','len',2)
				m(beat,2, '*99 '..math.random(-100,100)..' movey0,*99 '..math.random(-100,100)..' movey1,*99 '..math.random(-100,100)..' movey2,*99 '..math.random(-100,100)..' movey3','len',1)
				m(beat,2, '*99 '..math.random(-100,100)..' movey0,*99 '..math.random(-100,100)..' movey1,*99 '..math.random(-100,100)..' movey2,*99 '..math.random(-100,100)..' movey3','len',2)
			end
			
			for beat=194,222,4 do
				m_ea(beat, 2, 200, 0, 'tandrunk', 'len', outQuad)
			end
			
			for beat=226,239,4 do
				mm(beat, 'vibbScr')
				mm(beat+.75, 'vibbEnd')
			end
			
			movementVal = 0
			movementValNeg = 0
			for beat=436,447,1 do
				m(beat,2, '*5 '..movementValNeg..' flip','len')
				m(beat,2, '*5 '..movementVal..' movex','len',1)
				m(beat,2, '*5 '..movementValNeg..' movex','len',2)
				movementVal = movementVal + 4.5
				movementValNeg = movementValNeg - 4.5
			end
			
			drunkyVal = 200
			for i = 1,table.getn(drunkyishpart) do
				local beat = drunkyishpart[i]
				m_ea(beat[1], 2.5, drunkyVal, 0, 'drunk', 'len', outQuad)
				m_ea(beat[1], 1, drunkyVal, 0, 'spiralx', 'len', outElastic)
				drunkyVal = -drunkyVal
			end
			for i = 1,table.getn(drunkyHard) do
				local beat = drunkyHard[i]
				m_ea(beat[1], 2.5, drunkyVal*4, 0, 'drunk', 'len', outElastic)
				drunkyVal = -drunkyVal
			end
			for i = 1,table.getn(drunkyzHard) do
				local beat = drunkyzHard[i]
				m_ea(beat[1], 2.5, drunkyVal*16, 0, 'drunkz', 'len', outElastic)
				drunkyVal = -drunkyVal
			end
			for i = 1,table.getn(tandrunkHard) do
				local beat = tandrunkHard[i]
				m_ea(beat[1], 2, drunkyVal, 0, 'tandrunk', 'len', outQuad)
				drunkyVal = -drunkyVal
			end
			for i = 1,table.getn(flyingOutyPos) do
				local beat = flyingOutyPos[i]
				m_ea(beat[1], 2, -9000, 0, 'tinyx', 'len', outElastic)
			end
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
				
				----------------------
				-- grab everything? --
				----------------------
				if SCREENMAN:GetTopScreen():GetChild('LifeP1') then LifeP1 = SCREENMAN:GetTopScreen():GetChild('LifeP1') end
				if SCREENMAN:GetTopScreen():GetChild('LifeP2') then LifeP2 = SCREENMAN:GetTopScreen():GetChild('LifeP2') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP1') then ScoreP1 = SCREENMAN:GetTopScreen():GetChild('ScoreP1') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP2') then ScoreP2 = SCREENMAN:GetTopScreen():GetChild('ScoreP2') end
				if SCREENMAN:GetTopScreen():GetChild('BPMDisplay') then BPMDisplay = SCREENMAN:GetTopScreen():GetChild('BPMDisplay') end
				if SCREENMAN:GetTopScreen():GetChild('LifeFrame') then LifeFrame = SCREENMAN:GetTopScreen():GetChild('LifeFrame') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreFrame') then ScoreFrame = SCREENMAN:GetTopScreen():GetChild('ScoreFrame') end
				if SCREENMAN:GetTopScreen():GetChild('Lyrics') then Lyrics = SCREENMAN:GetTopScreen():GetChild('Lyrics') end
				if SCREENMAN:GetTopScreen():GetChild('SongForeground') then SongForeground = SCREENMAN:GetTopScreen():GetChild('SongForeground') end
				if SCREENMAN:GetTopScreen():GetChild('SongBackground') then SongBackground = SCREENMAN:GetTopScreen():GetChild('SongBackground') end
				if SCREENMAN:GetTopScreen():GetChild('Overlay') then Overlay = SCREENMAN:GetTopScreen():GetChild('Overlay') end
				if SCREENMAN:GetTopScreen():GetChild('Underlay') then Underlay = SCREENMAN:GetTopScreen():GetChild('Underlay') end
				
				--------------------------
				-- hide everything? y/n --
				--------------------------
				mod_hideall = true;
				if mod_hideall == true then
					if LifeFrame then LifeFrame:hidden(1) end
					if LifeP1 then LifeP1:hidden(1) end
					if LifeP2 then LifeP2:hidden(1) end
					if ScoreP1 then ScoreP1:hidden(1) end
					if ScoreP2 then ScoreP2:hidden(1) end
					if BPMDisplay then BPMDisplay:hidden(1) end
					if Overlay then Overlay:hidden(1) end
					if Underlay then Underlay:hidden(1) end
					if ScoreFrame then ScoreFrame:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
				P3 = SCREENMAN:GetTopScreen():GetChild('PlayerP3');
				P4 = SCREENMAN:GetTopScreen():GetChild('PlayerP4');
				
				if P1 then
					jud1 = P1:GetChild('Judgment');
					com1 = P1:GetChild('Combo');
				end
				if P2 then
					jud2 = P2:GetChild('Judgment');
					com2 = P2:GetChild('Combo');
				end
				
				if P3 then
					P3:hidden(0)
					P3:GetChild('Judgment'):hidden(1)
					P3:SetInputPlayer(0)
					P3:x(P1:GetX())
				end
				if P4 then
					P4:hidden(0)
					P4:GetChild('Judgment'):hidden(1)
					P4:SetInputPlayer(1)
					P4:x(P2:GetX())
				end

				screen = SCREENMAN:GetTopScreen();
				checked = true;
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						GAMESTATE:ApplyGameCommand('mod,clearall',i)
						if _G['init_modsp'..i] then 
							GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
						end
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
									else
										GAMESTATE:ApplyGameCommand('mod,'..v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				-------------------------------------------------------------
				-- exschwasion presents ease mod reader v2.5, compact mode --
				-------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									local strength = v[7](beat - v[1], v[3], v[4] - v[3], v[6] == 'end' and v[2] - v[1] or v[2], v[10], v[11])
									local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
									GAMESTATE:ApplyGameCommand('mod,*-1 '..modstr,v[8]);
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
									local modstr = v[5] == 'xmod' and v[4]..'x' or (v[5] == 'cmod' and 'C'..v[4] or v[4]..' '..v[5])
									GAMESTATE:ApplyModifiers('*-1 '..modstr,v[8]);
								end
							end
						else
							SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------

				if perframe(128,157) or perframe(160,176) then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*0.125)*100 ..'% skewx');
				end
				
				if perframe(192,223) or perframe(256,284) or perframe(288,303) or perframe(304,319) then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*0.125)*100 ..'% skewx',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*0.125)*-100 ..'% skewx',2);
				end
				
				if perframe(320,335) or perframe(336,349) or perframe(352,359) or perframe(360,366) then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*0.125)*300 ..'% skewx',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*0.125)*-300 ..'% skewx',2);
				end
				
				if beat > 577 and beat < 612 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..(-100*math.rad(auxvar:GetX()))..' confusionoffset')
					GAMESTATE:ApplyGameCommand('mod,*10000 '..((auxvar:GetX()))..' rotationz')
				end
				
				--------------------
				-- Actions table --
				--------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<BitmapText
		Font="Common Normal"
		Text="KEEP::QUIET!"
		InitCommand="draworder,999;diffuse,1,0,0,1;zoom,0"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;vibrate,1;hibernate,60.5;linear,0.75;zoom,9;rotationz,45;skewx,-1;diffusealpha,0"
	/>
	
	<Layer
        File="coin.sprite"
        InitCommand="draworder,999"
        OnCommand="zoom,20;hibernate,30;x,SCREEN_WIDTH/4;y,SCREEN_CENTER_Y+500;accelerate,0.5;y,SCREEN_CENTER_Y-200;accelerate,0.25;y,SCREEN_CENTER_Y+500"
    />
	
	<Layer
        File="coin.sprite"
        InitCommand="draworder,999"
        OnCommand="zoom,20;hibernate,30;x,SCREEN_WIDTH*3/4;y,SCREEN_CENTER_Y+500;accelerate,0.5;y,SCREEN_CENTER_Y-200;accelerate,0.25;y,SCREEN_CENTER_Y+500"
    />
	
	<Layer
		Type="Quad"
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
        HidePlrMessageCommand="%function(self) for pn = 1, 2 do if Plr(pn) then Plr(pn):hidden(1) end end end"
        ShowPlrMessageCommand="%function(self) for pn = 1, 2 do if Plr(pn) then Plr(pn):hidden(0) end end end"
		SpinMessageCommand="x,0;linear,(m_bl)*60;x,360*5"/>/>
	
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZZLAER>
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZZLAER>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	vibbMessageCommand="%function(self)
			local p1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1')
			local p2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2')
			p1:vibrate()
			p1:effectmagnitude(60,60,60)
			p2:vibrate()
			p2:effectmagnitude(60,60,60)
	end"
	vibbEndMessageCommand="%function(self)
			local p1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1')
			local p2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2')
			local screen = SCREENMAN:GetTopScreen()
			p1:stopeffect()
			p2:stopeffect()
			screen:stopeffect()
	end"
	vibbScrMessageCommand="%function(self)
			local screen = SCREENMAN:GetTopScreen()
			screen:vibrate()
	end"
	/>
	
	<Layer
Type="Sprite"
Texture="transparent.png"
OnCommand="%function(self)
self:x(SCREEN_CENTER_X)
self:y(SCREEN_CENTER_Y)
self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()));
self:diffusealpha(0)
self:zoom(1)
self:queuecommand('renderMe');
end"

renderMeCommand="%function(self)
self:zoom(1.05)
self:SetTexture(myAft:GetTexture())
self:blend('add')
end"
SlowlyAppearAFTMessageCommand="linear,1;diffusealpha,0.75;blend,modulate"
SlowlyHideAFTMessageCommand="linear,8;diffusealpha,0;blend,normal"
/>
	
	<Layer
Type="ActorFrameTexture"
OnCommand="%function(self)

    self:SetWidth(DISPLAY:GetDisplayWidth());
    self:SetHeight(DISPLAY:GetDisplayHeight());
    self:EnableDepthBuffer( false );
    self:EnableAlphaBuffer( true );
    self:EnableFloat( false );
    self:EnablePreserveTexture( true );
    self:hidden(0);
    self:diffusealpha(1);
    self:zoom(0.75)
    self:Create();
    myAft=self
end"
/>
	
	<Layer
		Type="Sprite"
		Frag="Shaders/YUYV422.frag"
		OnCommand="%function(self) 
			myShaderA = self; 
			self:xy(SCREEN_CENTER_X, SCREEN_CENTER_Y);
			self:blend('invertdest')
			self:basezoomx(SCREEN_WIDTH/DISPLAY:GetDisplayWidth());
			self:basezoomy(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()*-1);
			self:SetTexture(myAft:GetTexture());
			self:diffusealpha(0)
		end"
		HideMessageCommand="diffusealpha,0"
		SlowlyAppearRedMessageCommand="linear,3;diffusealpha,1"
		AppearRedMessageCommand="blend,modulate;linear,3;diffusealpha,1"
	/>
	
	<Layer
		Type="Sprite"
		Frag="Shaders/Vivid light.frag"
		OnCommand="%function(self) 
			myShaderB = self; 
			self:xy(SCREEN_CENTER_X, SCREEN_CENTER_Y);
			self:blend('modulate')
			self:basezoomx(SCREEN_WIDTH/DISPLAY:GetDisplayWidth());
			self:basezoomy(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()*-1);
			self:SetTexture(myAft:GetTexture());
			self:diffusealpha(0)
		end"
		HideMessageCommand="diffusealpha,0"
		SlowlyAppearMixMessageCommand="linear,8;diffusealpha,1"
	/>
	
</children></ActorFrame>