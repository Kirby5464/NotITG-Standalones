<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20170313
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, go download it, you mofo.');
	end
	
	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/315 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	function Proxy(pn)
		return _G['P'..pn..'p']
	end
	
end"
><children><ActorFrame Condition="nitg_version"
OnCommand="%function(self)
	if not string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl')
	or string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d')
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') 
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d') < 
	string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') then
		SCREENMAN:SystemMessage('D3D Video Renderer detected. Expect textures to fail.');
	end
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			
			
			
			
			
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
			
			
			
			
			
			
			
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,9999, '*99 2.75x,*99 stealthpastreceptors,*99 cover, *9e9 cosec','end'},
				{4.5, 5, '*99 2000 confusion','end'},
				{5, 6, '*9999 no confusion','end'},
				{7, 0.1, '*10 40 rotationz','len'},
				{7.5, 0.1, '*15 -40 rotationz','len'},
				{8, 0.1, '*10 40 rotationz','len'},
				{8.5, 0.1, '*15 -40 rotationz','len'},
				-- {11, 12.333, '*10 25 reverse0-n','end'},
				{11, 12.333, '*10 25 reverse0','end'},
				-- {11.333, 12.333, '*10 25 reverse1-n','end'},
				{11.333, 12.333, '*10 25 reverse1','end'},
				-- {11.667, 12.333, '*10 25 reverse2-n','end'},
				{11.667, 12.333, '*10 25 reverse2','end'},
				-- {12, 12.333, '*10 25 reverse3-n','end'},
				{12, 12.333, '*10 25 reverse3','end'},
				{13, 1, '*6 mini','len'},
				{13.5, 1, '*6 no mini','len'},
				{14, 1, '*6 mini','len'},
				{14.5, 1, '*6 no mini','len'},
				{15, 1, '*6 mini','len'},
				{15.5, 1, '*6 no mini','len'},
				{15.75, 16, '*6 mini','end'},
				{16, 1, '*4 150 mini','len'},
				{16.25, 17, '*4 200 mini','end'},
				{16.5, 17, '*99 no mini','end'},
				{20.5, 21, '*99 2000 confusion','end'},
				{21, 22, '*9999 no confusion','end'},
				{23, 0.1, '*10 40 rotationz','len'},
				{23.5, 0.1, '*15 -40 rotationz','len'},
				{24, 0.1, '*10 40 rotationz','len'},
				{24.5, 0.1, '*15 -40 rotationz','len'},
				-- {27, 28.333, '*10 25 reverse0-n','end'},
				{27, 28.333, '*10 25 reverse0','end'},
				-- {27.333, 28.333, '*10 25 reverse1-n','end'},
				{27.333, 28.333, '*10 25 reverse1','end'},
				-- {27.667, 28.333, '*10 25 reverse2-n','end'},
				{27.667, 28.333, '*10 25 reverse2','end'},
				-- {28, 28.333, '*10 25 reverse3-n','end'},
				{28, 28.333, '*10 25 reverse3','end'},
				{29, 1, '*6 mini','len'},
				{29.5, 1, '*6 no mini','len'},
				{30, 1, '*6 mini','len'},
				{30.5, 0.25, '*6 200% mini','len'},
				{36.5, 37, '*99 2000 confusion','end'},
				{37, 38, '*9999 no confusion','end'},
				{39, 0.1, '*10 40 rotationz','len'},
				{39.5, 0.1, '*15 -40 rotationz','len'},
				{40, 0.1, '*10 40 rotationz','len'},
				{40.5, 0.1, '*15 -40 rotationz','len'},
				-- {43, 44.333, '*10 25 reverse0-n','end'},
				{43, 44.333, '*10 25 reverse0','end'},
				-- {43.333, 44.333, '*10 25 reverse1-n','end'},
				{43.333, 44.333, '*10 25 reverse1','end'},
				-- {43.667, 44.333, '*10 25 reverse2-n','end'},
				{43.667, 44.333, '*10 25 reverse2','end'},
				-- {44, 44.333, '*10 25 reverse3-n','end'},
				{44, 44.333, '*10 25 reverse3','end'},
				{33, 65, '*99 200 beatz','end'},
				{45, 1, '*6 mini','len'},
				{45.5, 1, '*6 no mini','len'},
				{46, 1, '*6 mini','len'},
				{46.5, 1, '*6 no mini','len'},
				{47, 1, '*6 mini','len'},
				{47.5, 1, '*6 no mini','len'},
				{47.75, 48, '*6 mini','end'},
				{48, 1, '*4 150 mini','len'},
				{48.25, 49, '*4 200 mini','end'},
				{49, 49.5, '*99 no mini','end'},
				{49, 65, '*99 1200 beatzmult','end'},
				{49, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{50, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{51, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{52, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{53, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{54, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{55, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{56, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{56.5, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{56.75, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{57, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{57.5, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{58, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{58.5, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{59, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{59.5, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{60, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{60.5, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{61, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{61, 88, '*3 -450% tiny','end'},
				{65, 91, '*4 dark,*4 stealth,*99 blind','end'},
				{67, 89, '*2 80 stealth,*2 55 stealthgg,*99 no tiny,*99 65% mini,*99 200% zigzag','end'},
				{97, 129, '*0.1 150 wave,*99 1000 beat','end'},
				{97.25, 129, '*1000 no beat','end'},
				{110, 0.1, '*30 0x','len'},
				{110.333, 0.1, '*30 0x','len'},
				{110.667, 0.1, '*30 0x','len'},
				{111, 0.1, '*30 0x','len'},
				{111.333, 0.1, '*30 0x','len'},
				{111.667, 0.1, '*30 0x','len'},
				{112, 0.1, '*30 0x','len'},
				{113, 0.1, '*30 0x','len'},
				{114, 0.1, '*30 0x','len'},
				-- {115.5, 124, '*2 reverse0-n','end'},
				{115.5, 124, '*2 reverse0','end'},
				-- {116, 124, '*2 reverse1-n','end'},
				{116, 124, '*2 reverse1','end'},
				-- {116.5, 124, '*2 reverse2-n','end'},
				{116.5, 124, '*2 reverse2','end'},
				-- {117, 124, '*2 reverse3-n','end'},
				{117, 124, '*2 reverse3','end'},
				{118, 125, '*4 25 tandigital,*99 tandigitalperiod,*4 20 spiralx','end'},
				{125, 126, '*6 50 tornado','end'},
				{129, 145, '*0.5 -350 tiny','end'},
				{129, 155, '*99 250 beat','end',1},
				{129, 155, '*99 -250 beat','end',2},
				{145, 155, '*99 beatmult,*0.3 55 tiny,*0.1 55 stealth,*0.1 tipsy','end'},
				{145, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{146, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{147, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{148, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{149, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{150, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{151, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{152, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{153, 155, '*99 150 beatmult','end'},
				{157, 158, '*10 spiralx','end'},
				{158, 158.5, '*3 no spiralx','end'},
				{161, 0.05, '*99 -300 tiny','len'},
				{161, 177, '*3 300 beat','end'},
				{161.5, 1, '*9 no tiny','len'},
				{162, 162.5, '*4 200 zoomy','end'},
				{162.5, 0.5, '*4 zoomy','len'},
				{163.25, 0.25, '*3 200 zoomy','len'},
				{163.75, 0.25, '*3 200 zoomx','len'},
				{169, 169.5, '*99 -300 tiny','end'},
				{169.5, 172, '*6 no tiny,*99 no stealth','end'},
				{171, 0.1, '*99 55 stealth','len'},
				{171.333, 0.1, '*99 55 stealth','len'},
				{171.667, 0.1, '*99 55 stealth','len'},
				{172, 0.1, '*99 55 stealth','len'},
				{173, 0.1, '*99 80 rotationx','len'},
				{174, 0.1, '*99 80 rotationx','len'},
				{175, 0.1, '*99 80 rotationx','len'},
				{175.667, 0.1, '*99 80 rotationx','len'},
				{176.333, 0.1, '*99 80 rotationx','len'},
				{177, 0.1, '*99 -300 tiny','len'},
				{177.25, 1, '*5 no tiny','len'},
				{179.25, 0.25, '*3 200 zoomy','len'},
				{179.75, 0.25, '*3 200 zoomx','len'},
				{169, 169.5, '*99 -300 tiny','end'},
				{169.5, 172, '*6 no tiny,*99 no stealth','end'},
				{171, 0.1, '*99 55 stealth','len'},
				{171.333, 0.1, '*99 55 stealth','len'},
				{171.667, 0.1, '*99 55 stealth','len'},
				{172, 0.1, '*99 55 stealth','len'},
				{173, 0.1, '*99 80 rotationx','len'},
				{174, 0.1, '*99 80 rotationx','len'},
				{175, 0.1, '*99 80 rotationx','len'},
				{175.667, 0.1, '*99 80 rotationx','len'},
				{176.333, 0.1, '*99 80 rotationx','len'},
				{177, 0.1, '*99 -300 tiny','len'},
				{177.25, 1, '*5 no tiny','len'},
				{184, 0.5, '*99 25 spiralx','len'},
				{185, 1, '*4 reverse','len'},
				{185.5, 1, '*4 split','len'},
				{186, 1, '*4 no reverse','len'},
				{186.5, 188, '*4 no split,*99 no stealth','end'},
				{187, 0.1, '*99 55 stealth','len'},
				{187.333, 0.1, '*99 55 stealth','len'},
				{187.667, 0.1, '*99 55 stealth','len'},
				{188, 0.5, '*99 35 spiraly','len'},
				{189, 194, '*0.7 reverse','end'},
				{193, 204, '*99 -300 beat','end'},
				{194, 1, '*5 alternate','len'},
				{194.5, 1, '*5 no alternate,*99 no reverse','len'},
				{196.5, 0.5, '*99 45 spiraly','len'},
				{201, 202, '*4 -150 tiny,*4 50 flip,*4 50 reverse','end'},
				{202, 204, '*4 no tiny,*4 no flip,*4 no reverse,*99 no stealth','end'},
				{203, 0.1, '*99 55 stealth','len'},
				{203.333, 0.1, '*99 55 stealth','len'},
				{203.667, 0.1, '*99 55 stealth','len'},
				{204, 0.5, '*99 65 spiralx','len'},
				{205, 208, '*99 75 spiraly','end'},
				{209, 210, '*99 200 zoomx','end'},
				{210, 217, '*6 zoomx,*99 300 beat','end'},
				{211, 1, '*10 125 zoomy','len'},
				{211.25, 1, '*10 95 zoomy','len'},
				{211.75, 215, '*10 zoomy,*99 no stealth','end'},
				{214.5, 0.1, '*99 55 stealth','len'},
				{214.75, 0.1, '*99 55 stealth','len'},
				{215.5, 216, '*5 25 zoomy','end'},
				{217, 0.1, '*99 -100 tiny','len'},
				{217, 253, '*99 no beat','end'},
				{218, 0.1, '*99 -100 tiny','len'},
				{218, 220, '*99 no stealth','end'},
				{219, 0.1, '*99 55 stealth','len'},
				{219.333, 0.1, '*99 55 stealth','len'},
				{219.667, 0.1, '*99 55 stealth','len'},
				{220, 221, '0 zoomy','end'},
				{221, 253, '*3 -500 movex,*15 zoomy','end',1},
				{221, 253, '*3 500 movex,*15 zoomy','end',2},
				{231, 232, '*99 150 zoomx','end'},
				{239, 241, '*99 2000 dizzy','end'},
				{241, 242, '*9999 no dizzy','end'},
				{241, 253, '*99 reverse','end',2},
				{243, 253, '*99 reverse','end',1},
				{245, 253, '*99 no reverse','end',2},
				{249, 253, '*99 reverse','end',2},
				{249, 253, '*99 no reverse','end',1},
				{251, 253, '*99 no reverse','end',2},
				{253, 256, '*5 no movex','end'},
				{256, 285, '*7 250 movex,*7 -9999 movex0,*7 -9999 movex2','end',1},
				{256, 285, '*7 -250 movex,*7 9999 movex1,*7 9999 movex3','end',2},
				{272, 272.5, '*99 2000 dizzy','end'},
				{272.5, 273, '*9999 no dizzy','end'},
				{281, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{282, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{283, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{284, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{285, 290, '*3 no movex,*9999 no movex0,*9999 no movex1,*9999 no movex2,*9999 no movex3','end'},
				{285, 289, 'dark','end'},
				{289, 315, '*99 400 beatz,*99 no dark','end'},
				{289, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{292.5, 293, '*99 2000 confusion','end'},
				{293, 294, '*9999 no confusion','end'},
				{295, 0.1, '*10 40 rotationz','len'},
				{295.5, 0.1, '*15 -40 rotationz','len'},
				{296, 0.1, '*10 40 rotationz','len'},
				{296.5, 0.1, '*15 -40 rotationz','len'},
				-- {299, 300.333, '*10 25 reverse0-n','end'},
				{299, 300.333, '*10 25 reverse0','end'},
				-- {299.333, 300.333, '*10 25 reverse1-n','end'},
				{299.333, 300.333, '*10 25 reverse1','end'},
				-- {299.667, 300.333, '*10 25 reverse2-n','end'},
				{299.667, 300.333, '*10 25 reverse2','end'},
				-- {300, 300.333, '*10 25 reverse3-n','end'},
				{300, 300.333, '*10 25 reverse3','end'},
				{301, 1, '*6 mini','len'},
				{301.5, 1, '*6 no mini','len'},
				{302, 1, '*6 mini','len'},
				{302.5, 1, '*6 no mini','len'},
				{303, 1, '*6 mini','len'},
				{303.5, 1, '*6 no mini','len'},
				{303.75, 304, '*6 mini','end'},
				{304, 1, '*6 no mini','len'},
				{305, 0.1, '*99 -300 tiny','len'},
				{305.25, 1, '*6 no tiny','len'},
				{308.5, 309, '*99 2000 confusion','end'},
				{309, 310, '*9999 no confusion','end'},
				{311, 0.1, '*10 40 rotationz','len'},
				{311.5, 0.1, '*15 -40 rotationz','len'},
				{312, 0.1, '*10 40 rotationz','len'},
				{312.5, 0.1, '*15 -40 rotationz','len'},
				-- {315, 316.333, '*10 25 reverse0-n','end'},
				{315, 316.333, '*10 25 reverse0','end'},
				-- {315.333, 316.333, '*10 25 reverse1-n','end'},
				{315.333, 316.333, '*10 25 reverse1','end'},
				-- {315.667, 316.333, '*10 25 reverse2-n','end'},
				{315.667, 316.333, '*10 25 reverse2','end'},
				-- {316, 316.333, '*10 25 reverse3-n','end'},
				{316, 316.333, '*10 25 reverse3','end'},
				{317, 1, '*6 mini','len'},
				{317.5, 1, '*6 no mini','len'},
				{318, 1, '*6 mini','len'},
				{318.5, 1, '*6 no mini','len'},
				{321, 0.1, '*99 -300 tiny','len'},
				{321.25, 1, '*6 no tiny','len'},
				{324.5, 325, '*99 2000 confusion','end'},
				{325, 326, '*9999 no confusion','end'},
				{327, 0.1, '*10 40 rotationz','len'},
				{327.5, 0.1, '*15 -40 rotationz','len'},
				{328, 0.1, '*10 40 rotationz','len'},
				{328.5, 0.1, '*15 -40 rotationz','len'},
				-- {331, 332.333, '*10 25 reverse0-n','end'},
				{331, 332.333, '*10 25 reverse0','end'},
				-- {331.333, 332.333, '*10 25 reverse1-n','end'},
				{331.333, 332.333, '*10 25 reverse1','end'},
				-- {331.667, 332.333, '*10 25 reverse2-n','end'},
				{331.667, 332.333, '*10 25 reverse2','end'},
				-- {332, 332.333, '*10 25 reverse3-n','end'},
				{332, 332.333, '*10 25 reverse3','end'},
				{333, 1, '*6 mini','len'},
				{333.5, 1, '*6 no mini','len'},
				{334, 1, '*6 mini','len'},
				{334.5, 1, '*6 no mini','len'},
				{334.75, 335, '*6 mini','end'},
				{335, 1, '*4 150 mini','len'},
				{335.25, 336, '*4 200 mini','end'},
				{335.5, 336, '*8 no mini','end'},
				{336, 1, '*8 mini','len'},
				{336.25, 1, '*8 no mini','len'},
				{337, 353, '*99 500 beatz,*99 5000 beatzmult','end'},
				{337, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{338, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{339, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{340, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{341, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{342, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{343, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{344, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{344.25, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{344.5, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{344.75, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{345, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{345.5, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{346, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{346.5, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{347, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{347.5, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{348, 0.1, '*99 35 rotationz,*99 -40 rotationx','len'},
				{348.5, 0.1, '*99 -35 rotationz,*99 40 rotationx','len'},
				{349, 353, '*3 -450% tiny','end'},
				{353, 999, '*0.4 300 centered,200 tiny,1200 bumpy','end'},
				{353, 999, '*0.3 420 rotationz,*0.3 dark,*0.3 stealth','len',1},
				{353, 999, '*0.3 -420 rotationz,*0.3 dark,*0.3 stealth','len',2}
			}
			
			
			
			
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 0
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoomy(0)
						end
					end
					
				end,true},
				{1,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:decelerate(0.1)
							a:spring(0.5)
							a:zoomy(1)
						end
					end
					
				end,true},
				{16.5,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoomy(0)
						end
					end
					
				end,true},
				{17,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:decelerate(0.1)
							a:spring(0.5)
							a:zoomy(1.5)
							a:linear(0.1)
							a:zoomy(1)
						end
					end
					
				end,true},
				{31,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoomy(0)
						end
					end
					
				end,true},
				{32,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:decelerate(0.1)
							a:spring(0.5)
							a:zoomy(1)
						end
					end
					
				end,true},
				{66,'GetProxy',true},
				
				{66,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_WIDTH/2);
							a:y(SCREEN_HEIGHT/2);
						end
					end
					
					for pn=1,2 do
						local d = 0.25; if pn == 2 then d = 0.75 end
						local a = _G['P'..pn]
						if a then
							a:hidden(1);
						end
						local b = _G['jud'..pn..'p']
						local d = 0.25; if pn == 2 then d = 0.75 end
						if b then
							b:hidden(1);
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(1);
						end
					end
					
					for pn=1,2 do
						local a = Proxy(pn)
						local d = .25; --if pn > 2 then d = 0.25 end
						if pn == 2 then d = .75 end
						if a then
							if pn<3 then
								a:hidden(0);
							end
							a:x(SCREEN_WIDTH*d);
							a:y(SCREEN_HEIGHT/2);
						end
					end
					
				end,true},
				
				{66,'ShowAFT',true},
				{90,'HideAFT',true},
				{91,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:zoomy(0)
						end
					end
					
				end,true},
				{96,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:decelerate(0.1)
							a:spring(0.5)
							a:zoomy(1)
						end
					end
					
				end,true},
				{97,function()
				
					for pn=1,2 do
						local b = _G['jud'..pn..'p']
						local d = 0.25; if pn == 2 then d = 0.75 end
						if b then
							b:hidden(0);
							b:x(SCREEN_WIDTH*d)
							b:y(SCREEN_HEIGHT*0.5)
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(0);
							c:x(SCREEN_WIDTH*d)
							c:y(SCREEN_HEIGHT*0.52)
						end
					end
					
				end,true},
				{97,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:wag()
							a:effectmagnitude(40, 0, 0)
							a:effectclock('beat')
							a:effectperiod(10)
						end
					end
					
				end,true},
				{129,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:stopeffect()
						end
					end
					
				end,true},
				{166.5,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:decelerate(0.25)
							a:skewx(-5)
						end
					end
					
				end,true},
				{166.5,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:decelerate(0.25)
							a:skewx(0)
						end
					end
					
				end,true},
				{225,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:bob()
							a:effectmagnitude(500, 0, 0)
							a:effectclock('beat')
							a:effectperiod(2)
						end
					end
					
				end,true},
				{253,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:stopeffect()
						end
					end
					
				end,true},
				{257,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:wag()
							a:effectmagnitude(0, 55, 0)
							a:effectclock('beat')
							a:effectperiod(2)
						end
					end
					
				end,true},
				{285,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:spin()
							a:effectmagnitude(0, 0, 9999)
						end
					end
					
				end,true},
				{288,function()
					
					for pn=1,2 do
						local a = Proxy(pn)
						if a then
							a:stopeffect()
							a:rotationz(0)
						end
					end
					
				end,true},
				{369,function()
				
					for pn=1,2 do
						local b = _G['jud'..pn..'p']
						local d = 0.25; if pn == 2 then d = 0.75 end
						if b then
							b:hidden(1);
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(1);
						end
					end
					
				end,true}
				
			}
			
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
			mod_sugarkiller(269,2,3,55,80)
			
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
			mod_wiggle(0,128,4,-100,1,'tiny')
			mod_wiggle(12,99,99,4000,0.75,'drunk')
			mod_wiggle(28,99,99,4000,0.75,'drunk')
			mod_wiggle(33,60,4,55,10,'stealth')
			mod_wiggle(44,99,99,4000,0.75,'drunk')
			mod_wiggle(108.5,99,99,4000,0.75,'drunk')
			mod_wiggle(300,99,99,4000,0.75,'drunk')
			mod_wiggle(316,99,99,4000,0.75,'drunk')
			mod_wiggle(332,99,99,4000,0.75,'drunk')
			
			--function switcheroo_add(beat,which,speed,len,pn)
			switcheroo_add(165,'invert',16,1)
			switcheroo_add(165.25,'ldur',16,1)
			switcheroo_add(165.5,'rdul',16,1)
			switcheroo_add(165.75,'flip',16,1)
			switcheroo_add(166,'normal',16,1)
			switcheroo_add(181,'flip',16,1)
			switcheroo_add(181.5,'rdul',16,1)
			switcheroo_add(181.75,'ldur',16,1)
			switcheroo_add(182,'normal',16,1)
			switcheroo_add(197,'rdul',16,1)
			switcheroo_add(197.5,'flip',16,1)
			switcheroo_add(197.75,'invert',16,1)
			switcheroo_add(198,'normal',16,1)
			switcheroo_add(213,'invert',16,1)
			switcheroo_add(213.25,'ldur',16,1)
			switcheroo_add(213.5,'rdul',16,1)
			switcheroo_add(213.75,'flip',16,1)
			switcheroo_add(214,'normal',16,1)
			
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
				
				----------------------
				-- grab everything? --
				----------------------
				if SCREENMAN:GetTopScreen():GetChild('LifeP1') then LifeP1 = SCREENMAN:GetTopScreen():GetChild('LifeP1') end
				if SCREENMAN:GetTopScreen():GetChild('LifeP2') then LifeP2 = SCREENMAN:GetTopScreen():GetChild('LifeP2') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP1') then ScoreP1 = SCREENMAN:GetTopScreen():GetChild('ScoreP1') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP2') then ScoreP2 = SCREENMAN:GetTopScreen():GetChild('ScoreP2') end
				if SCREENMAN:GetTopScreen():GetChild('BPMDisplay') then BPMDisplay = SCREENMAN:GetTopScreen():GetChild('BPMDisplay') end
				if SCREENMAN:GetTopScreen():GetChild('LifeFrame') then LifeFrame = SCREENMAN:GetTopScreen():GetChild('LifeFrame') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreFrame') then ScoreFrame = SCREENMAN:GetTopScreen():GetChild('ScoreFrame') end
				if SCREENMAN:GetTopScreen():GetChild('Lyrics') then Lyrics = SCREENMAN:GetTopScreen():GetChild('Lyrics') end
				if SCREENMAN:GetTopScreen():GetChild('SongForeground') then SongForeground = SCREENMAN:GetTopScreen():GetChild('SongForeground') end
				if SCREENMAN:GetTopScreen():GetChild('SongBackground') then SongBackground = SCREENMAN:GetTopScreen():GetChild('SongBackground') end
				if SCREENMAN:GetTopScreen():GetChild('Overlay') then Overlay = SCREENMAN:GetTopScreen():GetChild('Overlay') end
				if SCREENMAN:GetTopScreen():GetChild('Underlay') then Underlay = SCREENMAN:GetTopScreen():GetChild('Underlay') end
				
				--------------------------
				-- hide everything? y/n --
				--------------------------
				mod_hideall = true;
				if mod_hideall == true then
					if LifeFrame then LifeFrame:hidden(1) end
					if LifeP1 then LifeP1:hidden(1) end
					if LifeP2 then LifeP2:hidden(1) end
					if ScoreP1 then ScoreP1:hidden(1) end
					if ScoreP2 then ScoreP2:hidden(1) end
					if BPMDisplay then BPMDisplay:hidden(1) end
					if Overlay then Overlay:hidden(1) end
					if Underlay then Underlay:hidden(1) end
					if ScoreFrame then ScoreFrame:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
				--aliases for old times sake
				
				if P1 then
					jud1 = P1:GetChild('Judgment');
					com1 = P1:GetChild('Combo');
				end
				if P2 then
					jud2 = P2:GetChild('Judgment');
					com2 = P2:GetChild('Combo');
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true;
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
			--set the vanish point of each fake playfield proxy actorframe to be its center, much like a real playfield
			if beat > mod_firstSeenBeat+1 then
				for pn=1,2 do
					local a = Proxy(pn)
					if a then
						a:SetVanishPoint(a:GetX(),a:GetY());
					end
				end
			end
			
			
			if beat > 66 and beat < 90 then
				
				for i=1,3 do
				
					_G['t_sprite_'..i]:z( (360*math.cos((beat*0.25*math.pi) + (math.pi*i*(2/3)))))
					
				end
				
			end
			
			if beat > 66 and beat < 90 then
				
				for i=1,3 do
				
					_G['t_sprite_'..i]:x( (85*math.sin((beat*1.25*math.pi) + (math.pi*i*(2/3)))))
					
				end
				
			end
			
			
			
			
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						GAMESTATE:ApplyGameCommand('mod,clearall',i)
						if _G['init_modsp'..i] then 
							GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
						end
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
									else
										GAMESTATE:ApplyGameCommand('mod,'..v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				--[[
				if beat > 95 and beat < 159 then
					for i,v in pairs(prefix_plr) do
						local multi = -1; if i == 2 then multi = 1; end
						if v then
							v:skewx(math.sin(beat*math.pi/4+0.5)*multi);
							if beat >= 96 then
								v:x(SCREEN_CENTER_X+math.cos(beat*math.pi/4)*160*multi);
							end
						end
					end
				end
				]]
				
				---------------------------------------
				-- Actions table --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
        <Layer
        File="death.png"
        InitCommand=""
        OnCommand="hibernate,158.227;x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;zoomtowidth,SCREEN_WIDTH;zoomtoheight,SCREEN_HEIGHT"
    />
	
	<!--Black quad covers the screen-->
	<LAER Type="Quad" ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
	OnCommand="hidden,1;diffuse,0,0,0,1;stretchto,0,0,sw,sh" />
	
	<!--Use a proxy to get the playfield into the foreground-->
	<LAER Type="ActorFrame" OnCommand="fov,45;hidden,1" InitCommand="%function(self) P1p = self end" ><children>
		<LAER Type="ActorProxy" GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('NoteField')) end end"/>
	</children></LAER>
	
	<LAER Type="ActorFrame" OnCommand="fov,45;hidden,1" InitCommand="%function(self) P2p = self end" ><children>
		<LAER Type="ActorProxy" GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('NoteField')) end end"/>
	</children></LAER>
	
	<!--ActorFrameTexture copies everything below it to a texture.-->
	<!--This texture is N O T an object. You MUST PUT it on an object using GetTexture and SetTexture.-->
	<!--See below for the syntax-->
	<LAER Type="ActorFrameTexture"
		InitCommand="%function(self)
			
			self:SetWidth( DISPLAY:GetDisplayWidth() );
			self:SetHeight( DISPLAY:GetDisplayHeight() );
			self:EnableDepthBuffer( true );
			self:EnableAlphaBuffer( true );
			self:EnableFloat( true );
			self:EnablePreserveTexture( true );
			
			self:hidden(0);
			
			self:Create();
			
			t_aft_tex = self;
			
		end"
	/>
	
	
	
	
	
	<!--Black quad covers the original screen-->
	<LAER Type="Quad" ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
	OnCommand="hidden,1;diffuse,0,0,0,1;stretchto,0,0,sw,sh" />
	
	<LAER Type="ActorFrame" InitCommand="%function(self) t_sprites = self; end"
	OnCommand="fov,45;x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y"><children>
	<LAER Type="Sprite" Texture="white"
		ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
		InitCommand="blend,add;hidden,1"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
			self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()))
		
			self:SetTexture(t_aft_tex:GetTexture());
			
			t_sprite_1 = self;
		end"
	/>
	<LAER Type="Sprite" Texture="white"
		ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
		InitCommand="blend,add;hidden,1"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
			self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()))
		
			self:SetTexture(t_aft_tex:GetTexture());
			
			t_sprite_2 = self;
		end"
	/>
	<LAER Type="Sprite" Texture="white"
		ShowAFTMessageCommand="hidden,0" HideAFTMessageCommand="hidden,1"
		InitCommand="blend,add;hidden,1"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
			self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()))
		
			self:SetTexture(t_aft_tex:GetTexture());
			
			t_sprite_3 = self;
		end"
	/>
	</children></LAER>
	
	
	
	
	
	
	
	
	
	<!--By putting our judgments here, they're above all the aft bullshit, which is desirable-->
	<ZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZLAER>
	<ZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZLAER>
	
	
	
	
	<!--Handling messages here is still fun and profitable-->
	<!--I didn't do anything with it in this example file though.-->
	<CODE Type="Quad" OnCommand="hidden,1"
	ShareArrowsMessageCommand="%function(self)
		for pn=1,2 do
			local a = _G['P'..pn]
			if a then
				
			end
		end
	end"
	ReturnArrowsMessageCommand="%function(self)
	
	end"
	/>
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
</children></ActorFrame>