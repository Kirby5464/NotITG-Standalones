<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20170313
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, mods will not work.');
	end
	
	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/145 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
	function Proxy(pn)
		return _G['P'..pn..'c']
	end
end"

><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers" />
	<Layer File="easing" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
			--function mod_ease(beat, len, start_strength, end_strength, mod, len_or_end, ease_type, pn, opt1, opt2)
				--insert mod into ease mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			--function modulo(a, b)
				--returns the remainder when a is divided by b, works properly with negatives unlike math.mod
				
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,464,'*2 2.5x, *-1 overhead, *-1 dizzyholds, *-1 stealthpastreceptors, *-1 modtimer, *-1 cover','end'},
				{0,222, '*99 dark','end'},
				{29,220, '*99 0.1x,*0.5 no dark,*99 mini,*99 200 spiralx,*99 -96 spiralxperiod,*99 200 spiraly,*99 -96 spiralyperiod,*99 spiralholds,*99 1000 longholds,*99 centered,*99 1000 bouncez,*99 bouncezperiod,*99 -1000 zigzagz,*99 zigzagzperiod,*99 gayholds,*99 1600 grain,*99 tornadoz,*99 1000 parabolay','end'},
				{221,223, '*99 200 drunk,*99 200 tipsy','end'},
				{222,281, '*99 1x,*99 -2000 bouncez,*99 bouncezperiod,*99 centered','end'},
				{229,281, '*99 beaty,*0.2 beatyperiod,*0.6 1100 movez','end'},
				{249.5,0.1, '*14 stealth','len'},
				{252,281, '*0.2 -300 tiny,150 pulseouter,*0.01 5 flip','end'},
				{281,282, '*99 no bouncez,*99 2.5x,*99 no movez,*99 no tiny,*99 no centered,*99 no pulseouter','end'},
				{282,296, '*99 300 beat','end'},
				
				{282,284, '*2 -23 flip,*2 26 invert','end'},
				{284,286, '*6 123 flip,*6 -26 invert','end'},
				{286,288, '*12 -60 flip,*12 61 invert','end'},
				{288,290, '*12 159 flip,*12 -60 invert','end'},
				{290,292, '*12 -100 flip,*12 invert','end'},
				{292,294, '*12 210 flip,*12 -111 invert','end'},
				{294,296, '*12 -151 flip,*12 153 invert','end'},
				{296,309, '*12 251 flip,*12 -151 invert','end'},
				
				{297,305, '*0.85 200 mini','end'},
				{305,309, '*2 no mini,*2 -2000 tiny','end'},
				{309,2, '*99 no tiny','len'},
				
				{309,309.5, '*25 -151 flip,*25 153 invert','end'},
				{309.5,310, '*25 210 flip,*25 -111 invert','end'},
				{310,310.5, '*25 -100 flip,*25 invert','end'},
				{310.5,311, '*25 159 flip,*25 -60 invert','end'},
				{311,311.5, '*25 -60 flip,*25 61 invert','end'},
				{311.5,312, '*25 123 flip,*25 -26 invert','end'},
				{312,312.5, '*25 -23 flip,*25 26 invert','end'},
				{312.5,313, '*25 no flip,*25 no invert','end'},
				
				--leave space for splines
				{313,360, '*5 -300 spline0x1,*5 spline0xoffset1,*5 -200 spline1x1,*5 spline1xoffset1,*5 200 spline2x1,*5 spline2xoffset1,*5 300 spline3x1,*5 spline3xoffset1,*5 -300 spline0y1,*5 spline0yoffset1,*5 -200 spline1y1,*5 spline1yoffset1,*5 -200 spline2y1,*5 spline2yoffset1,*5 -300 spline3y1,*5 spline3yoffset1,*5 550 spline0z1,*5 spline0zoffset1,*5 550 spline1z1,*5 spline1zoffset1,*5 550 spline2z1,*5 spline2zoffset1,*5 550 spline3z1,*5 spline3zoffset1','end'},
				--leave space for splines
				
				{313,360, '*10 centered,*10 50 flip,*10 mini,*10 spiralholds,*10 300 beat,*99 arrowpath,*99 beatperiod,*-1 approachtype,*-1 1.5x','end'},
				{313,360, '*10 500 bouncez,*10 bouncezperiod','end',1},
				{313,360, '*10 reverse,*10 -600 bouncez,*10 bouncezperiod','end',2},
				{345,346, '*-1 spiralx','end'},
				{360,1, '*-1 no spiralholds,*-1 no bouncez','len'},
				{369,373, '*8 1x','end'},
				
				{369,369.5, '*80 400 drunk,*40 200 tipsy','end'},
				{369.75,370.25, '*80 -400 drunk,*40 -200 tipsy','end'},
				{370.5,371, '*80 400 drunk,*40 200 tipsy','end'},
				{371.25,371.75, '*80 -400 drunk,*40 -200 tipsy','end'},
				
				{373,410, '*6 -1000 movex1,*6 1000 movex3,*6 stealth1,*6 stealth3','end',1},
				{373,410, '*6 -1000 movex0,*6 1000 movex2,*6 stealth0,*6 stealth2','end',2},
				
				--leave space for splines
				{373,407, '*5 -200 spline0x1,*5 spline0xoffset1,*5 -100 spline1x1,*5 spline1xoffset1,*5 100 spline2x1,*5 spline2xoffset1,*5 300 spline3x1,*5 spline3xoffset1,*99 spline0roty1,*99 500 spline0rotyoffset1,*99 spline1roty1,*99 500 spline1rotyoffset1,*99 -100 spline2roty1,*99 500 spline2rotyoffset1,*99 -100 spline3roty1,*99 500 spline3rotyoffset1,*5 55 mini','end'},
				--leave space for splines
				
				{377,410, '*4 55 stealth','end'},
				{377,410, '*99 800 bouncez,*99 parabolaz','end',1},
				{377,410, '*99 -800 bouncez,*99 -100 parabolaz','end',2},
				{409,410, '*10 50 flip,*10 50 reverse,*10 -75 tiny','end'},
				{410,420, '*10 50 flip,*10 no reverse','end'},
				{421,421.5, '*80 400 drunk,*40 200 tipsy,*99 no flip','end'},
				{421.75,422.25, '*80 -400 drunk,*40 -200 tipsy','end'},
				{422.5,423, '*80 400 drunk,*40 200 tipsy','end'},
				{423.25,423.5, '*80 -400 drunk,*40 -200 tipsy','end'},
				{425,438, '*0.8 500 flip,*0.4 -200 tornado,*15 no tiny,*15 no tinyy,*15 no tinyx','end'},
				{437,464, 'tiny','end'},
				{440,464, '300 distant','end'},
				{441,464, '*8 5000 bumpyx,*0.1 stealth,dark','end'}
			}
			local m = mod_insert
			
			for beat=278,281,1 do
				m(beat,0.1, '*10 stealth','len')
			end
			
			centers={{313,359},{361,368}}
			
			for i,v in pairs(centers) do
				for beat=v[1],v[2] do
					m(beat,1, '*99 no centered2','len')
					m(beat+.3,1, '*1.17 400 centered2','len')
				end
			end
			
			local incRot = 5
			local incRot2 = -5
			for beat=361,368,1 do
				m(beat,1, '*2 '..incRot..' rotationz','len',1)
				m(beat,1, '*2 '..incRot2..' rotationz','len',2)
				incRot = incRot + 10
				incRot2 = incRot2 - 10
			end
			
			mod_spring(29,200,900,'tipsy')
			mod_wiggle(297,37,5,400,3,'tipsy')
			mod_wiggle(326,4,5,400,3,'drunk')
			mod_wiggle(372,2,2,400,2,'drunk')
			mod_wiggle(372,2,2,200,2,'tipsy')
			mod_wiggle(406,7,5,400,3,'tipsy')
			mod_wiggle(424,4,5,400,3,'tipsy')
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				{317, 318, 100, 0, 'confusion', 'end', inQuad},
				{319, 320, 200, 0, 'digital', 'end', inQuad},
				{320, 323, 400, 100, 'zoomx', 'end', outElastic},
				{325, 328, 400, 100, 'zoomy', 'end', outElastic},
				{328, 331, 400, 100, 'zoomx', 'end', outElastic},
				{332, 335, 400, 100, 'zoomy', 'end', outElastic},
				{337, 338, 100, 0, 'confusiony', 'end', inQuad},
				{344, 345, 100, 0, 'confusion', 'end', inQuad},
				{349, 350, 100, 0, 'confusionx', 'end', inQuad},
				{351, 352, 100, 0, 'confusiony', 'end', inQuad},
				{355, 356, 100, 0, 'confusionx', 'end', inQuad},
				{353, 354, 100, 0, 'confusion', 'end', inQuad},
				{360, 361, 100, 0, 'spiraly', 'end', inQuad},
				{360, 361, 300, 0, 'drunk', 'end', inQuad},
				{373, 376, 200, 0, 'tornado', 'end', inQuad},
				{403, 404, 2000, 0, 'zoomz', 'end', inOutElastic},
			}
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 0
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,'GetProxy',true},
				{0,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:GetChild('Judgment'):hidden(1)
							a:GetChild('Combo'):hidden(1)
						end
					end
					
					for pn=1,2 do
						local d = 0.25; if pn == 2 then d = 0.75 end
						local b = _G['jud'..pn..'p']
						if b then
							b:hidden(0);
							b:basezoomx(0.75);
							b:basezoomy(0.75);
							b:x(SCREEN_WIDTH*d)
							b:y(SCREEN_HEIGHT*0.5)
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(0);
							c:basezoomx(0.75);
							c:basezoomy(0.75);
							c:x(SCREEN_WIDTH*d)
							c:y(SCREEN_HEIGHT*0.5)
						end
					end
				end,true},
				{0, function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
						end
					end
				end,true},
				{305, function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:spin()
							a:effectmagnitude(0,0,2000)
						end
						local b = SCREENMAN:GetTopScreen();
						if b then
							b:vibrate()
						end
					end
				end,true},
				{309, function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:stopeffect()
							a:rotationz(0)
						end
						local b = SCREENMAN:GetTopScreen();
						if b then
							b:stopeffect()
						end
					end
				end,true},
				{433, function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:spin()
							a:effectmagnitude(0,0,2000)
						end
					end
				end,true},
				{437, function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:stopeffect()
							a:rotationz(0)
						end
					end
				end,true},
			}
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
				
				----------------------
				-- grab everything? --
				----------------------
				if SCREENMAN:GetTopScreen():GetChild('LifeP1') then LifeP1 = SCREENMAN:GetTopScreen():GetChild('LifeP1') end
				if SCREENMAN:GetTopScreen():GetChild('LifeP2') then LifeP2 = SCREENMAN:GetTopScreen():GetChild('LifeP2') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP1') then ScoreP1 = SCREENMAN:GetTopScreen():GetChild('ScoreP1') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP2') then ScoreP2 = SCREENMAN:GetTopScreen():GetChild('ScoreP2') end
				if SCREENMAN:GetTopScreen():GetChild('BPMDisplay') then BPMDisplay = SCREENMAN:GetTopScreen():GetChild('BPMDisplay') end
				if SCREENMAN:GetTopScreen():GetChild('LifeFrame') then LifeFrame = SCREENMAN:GetTopScreen():GetChild('LifeFrame') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreFrame') then ScoreFrame = SCREENMAN:GetTopScreen():GetChild('ScoreFrame') end
				if SCREENMAN:GetTopScreen():GetChild('Lyrics') then Lyrics = SCREENMAN:GetTopScreen():GetChild('Lyrics') end
				if SCREENMAN:GetTopScreen():GetChild('SongForeground') then SongForeground = SCREENMAN:GetTopScreen():GetChild('SongForeground') end
				if SCREENMAN:GetTopScreen():GetChild('SongBackground') then SongBackground = SCREENMAN:GetTopScreen():GetChild('SongBackground') end
				if SCREENMAN:GetTopScreen():GetChild('Overlay') then Overlay = SCREENMAN:GetTopScreen():GetChild('Overlay') end
				if SCREENMAN:GetTopScreen():GetChild('Underlay') then Underlay = SCREENMAN:GetTopScreen():GetChild('Underlay') end
				
				--------------------------
				-- hide everything? y/n --
				--------------------------
				mod_hideall = true;
				if mod_hideall == true then
					if LifeFrame then LifeFrame:hidden(1) end
					if LifeP1 then LifeP1:hidden(1) end
					if LifeP2 then LifeP2:hidden(1) end
					if ScoreP1 then ScoreP1:hidden(1) end
					if ScoreP2 then ScoreP2:hidden(1) end
					if BPMDisplay then BPMDisplay:hidden(1) end
					if Overlay then Overlay:hidden(1) end
					if Underlay then Underlay:hidden(1) end
					if ScoreFrame then ScoreFrame:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
				
				if P1 then
					jud1 = P1:GetChild('Judgment');
					com1 = P1:GetChild('Combo');
					--P1:x(SCREEN_CENTER_X);
				end
				if P2 then
					jud2 = P2:GetChild('Judgment');
					com2 = P2:GetChild('Combo');
					--P2:x(SCREEN_CENTER_X);
				end

				screen = SCREENMAN:GetTopScreen();
				checked = true;
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						GAMESTATE:ApplyGameCommand('mod,clearall',i)
						if _G['init_modsp'..i] then 
							GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
						end
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
									else
										GAMESTATE:ApplyGameCommand('mod,'..v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				---------------------------------------------------
				-- ease mod reader v2                            --
				-- friendship ended with if wall                 --
				-- now functions as parameters is my best friend --
				---------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									
									local duration = v[2];
									if v[6] == 'end' then duration = v[2] - v[1] end
									local curtime = beat - v[1]
									local diff = v[4] - v[3]
									local startstrength = v[3]
									local curve = v[7]
									local mod = v[5]
									
									local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
									
									if v[5] == 'xmod' then
										if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..'x',v[8]);
										else GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..'x'); end
									else
										if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..' '..mod,v[8]);
										else GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..' '..mod); end
									end
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
									if v[5] == 'xmod' then
										if  v[8] then GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..'x', v[8]);
										else GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..'x'); end
									else
										if v[8] then GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..' '..v[5], v[8]);
										else GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..' '..v[5]); end
									end
								end
							end
						else
							SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				if beat > 377 and beat < 410 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*200 ..'% tiny');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*200 ..'% tinyx');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*200 ..'% tinyy');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*200 ..'% stealthgr');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.tan(beat*math.pi)*200 ..'% stealthgg');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*200 ..'% stealthgb');
				end
				
				if beat > 410 and beat < 425 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*2)*200 ..'% tiny');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*2)*200 ..'% tinyx');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi*2)*200 ..'% tinyy');
				end
				
				---------------------------------------
				-- Actions table --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<Layer
		Type="Quad"
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
        HidePlrMessageCommand="%function(self) for pn = 1, 2 do if Plr(pn) then Plr(pn):hidden(1) end end end"
        ShowPlrMessageCommand="%function(self) for pn = 1, 2 do if Plr(pn) then Plr(pn):hidden(0) end end end"/>
		
	<Layer
        File="vhs.sprite"
        InitCommand="draworder,999"
        OnCommand="hibernate,2.5;x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;zoomtowidth,SCREEN_WIDTH;zoomtoheight,SCREEN_HEIGHT;blend,add;diffusealpha,1;sleep,63.75;linear,1;diffusealpha,0"
    />
	
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZZLAER>
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZZLAER>
	
</children></ActorFrame>