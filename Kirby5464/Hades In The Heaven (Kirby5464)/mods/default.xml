<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20170313
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, mods will not work');
	end
	
	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/145 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function TiB(b)
		return (1/GAMESTATE:GetCurBPS()) * b
	end
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
	function Proxy(pn)
		return _G['P'..pn..'c']
	end
end"

><children><ActorFrame Condition="nitg_version"
OnCommand="%function(self)
	nvidia = false
	alphamult = 1
	if string.find(string.lower(PREFSMAN:GetPreference('LastSeenVideoDriver')), 'nvidia') or string.find(string.lower(DISPLAY:GetVendor()),'nvidia') then
		Trace('NVidia graphics driver detected.')
		Trace('AFT multiplier set to 0.9')
		nvidia = true
		alphamult = 0.9
	end
	if not string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl')
	or string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d')
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') 
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d') < 
	string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') then
		SCREENMAN:SystemMessage('D3D Video Renderer detected. Expect textures to fail.');
	end
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers" />
	<Layer File="easing" />
	<Layer File="chart2lua" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
			--function mod_ease(beat, len, start_strength, end_strength, mod, len_or_end, ease_type, pn, opt1, opt2)
				--insert mod into ease mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			--function modulo(a, b)
				--returns the remainder when a is divided by b, works properly with negatives unlike math.mod
				
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,316, '*2 2.5x,*-1 overhead,*-1 approachtype,*-1 dizzyholds,*-1 stealthpastreceptors,*-1 modtimer,*-1 cover','end'},
				{1,28, '150 beat','end'},
				{17,28, '*0.1 -500 tiny','end'},
				{28,32, 'dark','end'},
				{29,32, '*2 bumpyx','end'},
				{89,96, '*0.25 -300 tiny,*0.1 25 stealth','end'},
				{96,97, '*5 0 zoomy','end'},
				{97,127, '*99 1x','end'},
				--leave space for splines
				{97,128, '*5 -150 spline0x1,*5 spline0xoffset1,*5 -100 spline1x1,*5 spline1xoffset1,*5 100 spline2x1,*5 spline2xoffset1,*5 150 spline3x1,*5 spline3xoffset1,*5 200 spline0z1,*5 spline0zoffset1,*5 200 spline1z1,*5 spline1zoffset1,*5 200 spline2z1,*5 spline2zoffset1,*5 200 spline3z1,*5 spline3zoffset1','end'},
				--leave space for splines
				{97,145, '*0.1 centered,*0.1 50 flip,*0.1 distant,*99 800 bouncez,*99 bouncezperiod','end'},
				{127,161, '*99 1.75x','end'},
				{145,161, '*0.04 no flip,*0.1 no centered,*0.1 no distant','end'},
				{161,176, '*0.1 155 distant,*0.5 3.5x','end'},
				{161,176, '400 bouncez,*99 bouncezperiod','end',1},
				{161,176, '-400 bouncez,*99 bouncezperiod','end',2},
				{171,176, '*4 -9000 tiny','end'},
				{176,5, '*-1 no rotationz,*-1 no confusionoffset,*-1 no bouncez','len'},
				{269,272, '*0.8 -400 tiny','end'},
				--leave space for splines
				{273,304, '*99 -40 spline0y0,*99 spline0yoffset0,*99 -40 spline1y0,*99 spline1yoffset0,*99 -40 spline2y0,*99 spline2yoffset0,*99 -40 spline3y0,*99 spline3yoffset0','end',2},
				--leave space for splines
				{273,304, '*99 stealth','end',1},
				{273,304, '*99 dark','end',2},
				{280,304, 'dark','end',1},
				{304,316, 'dark,500 drunk,500 tipsy,500 drunkz,500 tornado,500 tornadoz,*99 gayholds,*0.3 200 mini','end'}
			}
			
			switcheroo_add(190,'invert',2,0.5)
			switcheroo_add(206,'urld',2,0.5)
			switcheroo_add(222,'invert',2,0.5)
			mod_drivendrop(273,32,1,1.5,2)
			mod_sugarkiller(301,6,1,100,55)
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{0, 4, 360, 0, 'rotationz', 'len', inOutBack},
				{1, 4, 55, 0, 'stealth', 'end', outQuad},
				{1, 4, 150, 0, 'drunk', 'end', outQuad},
				{1, 4, 100, 0, 'tipsy', 'end', outQuad},
				{1, 4, 100, 0, 'dizzy', 'end', outQuad},
				{15, 17, 55, 0, 'stealth', 'end', outQuad},
				{25, 27, 55, 0, 'stealth', 'end', outQuad},
				{28, 30, 55, 0, 'stealth', 'end', outQuad},
				{31, 33, 55, 0, 'stealth', 'end', outQuad},
				{32, 34, 200, 0, 'drunk', 'end', outQuad},
				{32, 34, 200, 0, 'tipsy', 'end', outQuad},
				{78, 79, 800, 100, 'zoomy', 'end', outCubic},
				{93, 94, -628, 0, 'dizzy', 'end', outQuad},
				{94, 95, 628, 0, 'dizzy', 'end', outQuad},
				{95, 96, -628, 0, 'dizzy', 'end', outQuad},
				{97, 100, 100, 0, 'arrowpath', 'end', outQuad},
				{111, 113, 55, 0, 'stealth', 'end', outQuad},
				{146, 163, 200, 0, 'beat', 'end', linear},
				{176, 178, -700, 0, 'tiny', 'end', outElastic},
				{176, 178, 700, 100, 'zoomx', 'end', outElastic},
				{176, 178, 99999, 100, 'zoomz', 'end', outElastic},
				{182.5, 184, 400, 100, 'zoomx', 'end', outCubic},
				{198.5, 200, 400, 100, 'zoomx', 'end', outCubic},
				{214.5, 216, 400, 100, 'zoomx', 'end', outCubic},
				{230.5, 232, 400, 100, 'zoomx', 'end', outCubic},
				{254, 255, 800, 100, 'zoomy', 'end', outCubic},
				{269, 270, 628, 0, 'dizzy', 'end', outQuad},
				{270, 271, -628, 0, 'dizzy', 'end', outQuad},
				{271, 272, 628, 0, 'dizzy', 'end', outQuad}
			}
			local m = mod_insert
			local m_ea = mod_ease
			local mm = mod_message
			
			for beat=122,123.5,.25 do
				m_ea(beat, 0.3, 55, 0, 'stealth', 'len', outQuad)
			end
			
			tips={{34,96},{210,271}}
			
			for i,v in pairs(tips) do
				for beat=v[1],v[2],2 do
					m_ea(beat, 1, 250, 0, 'tipsy', 'len', outQuad)   
				end
			end
			
			up={{4,15},{26,29},{276,289},{294,304}}
			
			for i,v in pairs(up) do
				for beat=v[1],v[2] do
					m_ea(beat, 1, 75, 0, 'brake', 'len', outQuad)
					m_ea(beat, 1, 75, 0, 'sudden', 'len', outQuad)
				end
			end
			
			rot_val = 25
			dru_val = 100
			tip_val = 150
			for i = 1,table.getn(rotzposneg) do
				local beat = rotzposneg[i]
				m_ea(beat[1], 2, rot_val, 0, 'rotationz', 'len', outQuad)
				m_ea(beat[1], 2, dru_val, 0, 'drunk', 'len', outElastic)
				m_ea(beat[1], 2, tip_val, 0, 'tipsy', 'len', outElastic)
				rot_val = -rot_val
				dru_val = -dru_val
				tip_val = -tip_val
			end
			
			rot_valp1 = 45
			rot_valp2 = -45
			for i = 1,table.getn(rotysneg) do
				local beat = rotysneg[i]
				m_ea(beat[1], 5, rot_valp1, 0, 'rotationy', 'len', outExpo, 1)
				m_ea(beat[1], 5, rot_valp2, 0, 'rotationy', 'len', outExpo, 2)
				rot_valp1 = -rot_valp1
				rot_valp2 = -rot_valp2
			end
			
			rot_val = 45
			for i = 1,table.getn(rotys) do
				local beat = rotys[i]
				m_ea(beat[1], 5, rot_val, 0, 'rotationy', 'len', outExpo)
				rot_val = -rot_val
			end
			
			for i = 1,table.getn(blinking) do
				local beat = blinking[i]
				m_ea(beat[1], 0.3, 55, 0, 'stealth', 'len', outQuad)
			end
			
			jig_val = 45
			for i = 1,table.getn(jigsoft) do
				local beat = jigsoft[i]
				m_ea(beat[1], 1, jig_val, 0, 'bumpyx', 'len', outExpo)
				jig_val = -jig_val
			end
			
			jig_val = 90
			for i = 1,table.getn(jighard) do
				local beat = jighard[i]
				m_ea(beat[1], 1, jig_val, 0, 'bumpyx', 'len', outExpo)
				jig_val = -jig_val
			end
			
			confu_val = 50
			for i = 1,table.getn(confusoft) do
				local beat = confusoft[i]
				m_ea(beat[1], 1, confu_val, 0, 'confusionoffset', 'len', outExpo)
				confu_val = -confu_val
			end
			
			confu_val = 100
			for i = 1,table.getn(confuhard) do
				local beat = confuhard[i]
				m_ea(beat[1], 1, confu_val, 0, 'confusionoffset', 'len', outExpo)
				confu_val = -confu_val
			end
			
			for i = 1,table.getn(static) do
				local beat = static[i]
				m_ea(beat[1], 1, 125, 0, 'spiralx', 'len', outElastic)
			end
			
			dru_val = 150
			for i = 1,table.getn(dududu) do
				local beat = dududu[i]
				m(beat[1],0.1, '*15 '..dru_val..' drunk','len')
				dru_val = -dru_val
			end
			
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 0
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,'GetProxy',true},
				{0,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:GetChild('Judgment'):hidden(1)
							a:GetChild('Combo'):hidden(1)
						end
					end
					
					for pn=1,2 do
						local d = 0.25; if pn == 2 then d = 0.75 end
						local b = _G['jud'..pn..'p']
						if b then
							b:hidden(0);
							b:basezoomx(0.75);
							b:basezoomy(0.75);
							b:x(SCREEN_WIDTH*d)
							b:y(SCREEN_HEIGHT*0.5)
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(0);
							c:basezoomx(0.75);
							c:basezoomy(0.75);
							c:x(SCREEN_WIDTH*d)
							c:y(SCREEN_HEIGHT*0.5)
						end
					end
				end,true},
				{15, 'Beat',true},
				{25, 'Beat',true},
				{28, 'Beat',true},
				{31, 'Beat',true},
				{40.5, 'skew1',true},
				{48.5, 'skew2',true},
				{56.5, 'skew1',true},
				{72.5, 'skew2',true},
				{77.5, 'skew1',true},
				{88.5, 'skew2',true},
				{96.5, function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
						end
					end
				end,true},
				{111, 'Beat',true},
				{161, 'VibbIncr',true},
				{169, 'RotIncr',true},
				{248.5, 'skew1',true},
				{253.5, 'skew2',true},
				{264.5, 'skew1',true},
				{304, 'Ending',true}
			}
			
			local colours_stealths = {'*99 stealthgg','*99 stealthgr','*99 stealthgb'}
			for i = 1,table.getn(negtiny) do
				local beat = negtiny[i]
				m_ea(beat[1], 1, -600, 0, 'tiny', 'len', outCubic)
				m(beat[1],0.1,colours_stealths[math.random(1,table.getn(colours_stealths))],'len')
				m(beat[1],0.1, '*16 55 stealth','len')
				m(beat[1],3, '*5 '..(math.random(-25,25))..' rotationx,*5 '..(math.random(-25,25))..' rotationz,*5 '..(math.random(-25,45))..' rotationy','len',1)
				m(beat[1],3, '*5 '..(math.random(-25,25))..' rotationx,*5 '..(math.random(-25,25))..' rotationz,*5 '..(math.random(-25,45))..' rotationy','len',2)
				mm(beat[1],'ShortBeat')
			end
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
				
				----------------------
				-- grab everything? --
				----------------------
				if SCREENMAN:GetTopScreen():GetChild('LifeP1') then LifeP1 = SCREENMAN:GetTopScreen():GetChild('LifeP1') end
				if SCREENMAN:GetTopScreen():GetChild('LifeP2') then LifeP2 = SCREENMAN:GetTopScreen():GetChild('LifeP2') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP1') then ScoreP1 = SCREENMAN:GetTopScreen():GetChild('ScoreP1') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreP2') then ScoreP2 = SCREENMAN:GetTopScreen():GetChild('ScoreP2') end
				if SCREENMAN:GetTopScreen():GetChild('BPMDisplay') then BPMDisplay = SCREENMAN:GetTopScreen():GetChild('BPMDisplay') end
				if SCREENMAN:GetTopScreen():GetChild('LifeFrame') then LifeFrame = SCREENMAN:GetTopScreen():GetChild('LifeFrame') end
				if SCREENMAN:GetTopScreen():GetChild('ScoreFrame') then ScoreFrame = SCREENMAN:GetTopScreen():GetChild('ScoreFrame') end
				if SCREENMAN:GetTopScreen():GetChild('Lyrics') then Lyrics = SCREENMAN:GetTopScreen():GetChild('Lyrics') end
				if SCREENMAN:GetTopScreen():GetChild('SongForeground') then SongForeground = SCREENMAN:GetTopScreen():GetChild('SongForeground') end
				if SCREENMAN:GetTopScreen():GetChild('SongBackground') then SongBackground = SCREENMAN:GetTopScreen():GetChild('SongBackground') end
				if SCREENMAN:GetTopScreen():GetChild('Overlay') then Overlay = SCREENMAN:GetTopScreen():GetChild('Overlay') end
				if SCREENMAN:GetTopScreen():GetChild('Underlay') then Underlay = SCREENMAN:GetTopScreen():GetChild('Underlay') end
				
				--------------------------
				-- hide everything? y/n --
				--------------------------
				mod_hideall = true;
				if mod_hideall == true then
					if LifeFrame then LifeFrame:hidden(1) end
					if LifeP1 then LifeP1:hidden(1) end
					if LifeP2 then LifeP2:hidden(1) end
					if ScoreP1 then ScoreP1:hidden(1) end
					if ScoreP2 then ScoreP2:hidden(1) end
					if BPMDisplay then BPMDisplay:hidden(1) end
					if Overlay then Overlay:hidden(1) end
					if Underlay then Underlay:hidden(1) end
					if ScoreFrame then ScoreFrame:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
				
				if P1 then
					jud1 = P1:GetChild('Judgment');
					com1 = P1:GetChild('Combo');
					--P1:x(SCREEN_CENTER_X);
				end
				if P2 then
					jud2 = P2:GetChild('Judgment');
					com2 = P2:GetChild('Combo');
					--P2:x(SCREEN_CENTER_X);
				end

				screen = SCREENMAN:GetTopScreen();
				checked = true;
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						GAMESTATE:ApplyGameCommand('mod,clearall',i)
						if _G['init_modsp'..i] then 
							GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
						end
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
									else
										GAMESTATE:ApplyGameCommand('mod,'..v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				---------------------------------------------------
				-- ease mod reader v2                            --
				-- friendship ended with if wall                 --
				-- now functions as parameters is my best friend --
				---------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									
									local duration = v[2];
									if v[6] == 'end' then duration = v[2] - v[1] end
									local curtime = beat - v[1]
									local diff = v[4] - v[3]
									local startstrength = v[3]
									local curve = v[7]
									local mod = v[5]
									
									local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
									
									if v[5] == 'xmod' then
										if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..'x',v[8]);
										else GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..'x'); end
									else
										if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..' '..mod,v[8]);
										else GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..' '..mod); end
									end
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
									if v[5] == 'xmod' then
										if  v[8] then GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..'x', v[8]);
										else GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..'x'); end
									else
										if v[8] then GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..' '..v[5], v[8]);
										else GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..' '..v[5]); end
									end
								end
							end
						else
							SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------

				if beat > 80 and beat < 81 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*2)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi*2)*50+50 ..'% Invert');
				end
				
				if beat > 161 and beat < 176 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:vibrate();
							a:effectmagnitude(auxv:getaux(),auxv:getaux(),auxv:getaux());
						end
					end
				end
				
				if beat > 169 and beat < 176 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..(-100*math.rad(auxvar:GetX()))..' confusionoffset')
					GAMESTATE:ApplyGameCommand('mod,*10000 '..((auxvar:GetX()))..' rotationz')
				end
				
				if beat > 256 and beat < 257 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*2)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi*2)*50+50 ..'% Invert');
				end
				
				if beat > 272 and beat < 273 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*2)*20 ..'% Cross,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
					GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi*2)*50+50 ..'% Invert');
				end
				
				---------------------------------------
				-- Actions table --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	skew1MessageCommand="%function(self)
			local p1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1')
			local p2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2')
			if P1 then
			p1:linear(.25)
			p1:skewx(2)
			p1:linear(.25)
			p1:skewx(0)
			end
			if P2 then
			p2:linear(.25)
			p2:skewx(-2)
			p2:linear(.25)
			p2:skewx(0)
			end
	end"
	skew2MessageCommand="%function(self)
			local p1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1')
			local p2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2')
			if P1 then
			p1:linear(.25)
			p1:skewx(-2)
			p1:linear(.25)
			p1:skewx(0)
			end
			if P2 then
			p2:linear(.25)
			p2:skewx(2)
			p2:linear(.25)
			p2:skewx(0)
			end
	end"
	/>
	
	<!-- Aux actor for rotationz -->
	<Layer
		Type="Quad"
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
        HidePlrMessageCommand="%function(self) for pn = 1, 2 do if Plr(pn) then Plr(pn):hidden(1) end end end"
        ShowPlrMessageCommand="%function(self) for pn = 1, 2 do if Plr(pn) then Plr(pn):hidden(0) end end end"
		RotIncrMessageCommand="x,0;linear,(m_bl)*60;x,360*25"/>
		
	<!-- Aux actor for vibration -->
	<Layer
    Type="Quad"
    InitCommand="%function(self)
        self:hidden(1);
        auxv = self;
        self:aux(0);
    end"
    VibbIncrMessageCommand="finishtweening;aux,0;linear,2;aux,25;linear,4.1;aux,0"/>
	
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZZLAER>
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZZLAER>
	
	<Layer
Type="Sprite"
Texture="transparent.png"
OnCommand="%function(self)
self:x(SCREEN_CENTER_X)
self:y(SCREEN_CENTER_Y)
self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth()));
self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight()));
self:diffusealpha(0)
self:zoom(1)
self:queuecommand('renderMe');
end"

renderMeCommand="%function(self)
self:zoom(1.05)
self:SetTexture(myAft:GetTexture())
self:blend('add')
end"
BeatMessageCommand="diffusealpha,0.6*alphamult;decelerate,TiB(3);diffusealpha,0"
ShortBeatMessageCommand="diffusealpha,0.8*alphamult;decelerate,TiB(1);diffusealpha,0"
EndingMessageCommand="diffusealpha,0.6*alphamult;linear,6;diffusealpha,0"
HideMessageCommand="diffusealpha,0;blend,normal"
/>


        <Layer
Type="ActorFrameTexture"
OnCommand="%function(self)

    self:SetWidth(DISPLAY:GetDisplayWidth());
    self:SetHeight(DISPLAY:GetDisplayHeight());
    self:EnableDepthBuffer( false );
    self:EnableAlphaBuffer( true );
    self:EnableFloat( false );
    self:EnablePreserveTexture( true );
    self:hidden(0);
    self:diffusealpha(1);
    self:zoom(0.6)
    self:Create();
    myAft=self
end"
/>
	
</children></ActorFrame>