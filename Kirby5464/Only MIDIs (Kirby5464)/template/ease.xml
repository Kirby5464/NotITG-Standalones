<Template Condition = "(function() --ease.xml
	prefix()
	local function cache(func)
		return setmetatable({}, {
			__index = function(self, k)
				self[k] = func(k)
				return self[k]
			end
		})
	end
	
	local sqrt = math.sqrt
	local sin = math.sin
	local cos = math.cos
	local pow = math.pow
	local exp = math.exp
	local pi = math.pi
	local abs = math.abs
	
	function bounce(t) return 4 * t * (1 - t) end
	function tri(t) return 1 - abs(2 * t - 1) end
	function bell(t) return inOutQuint(tri(t)) end
	function pop(t) return 3.5 * (1 - t) * (1 - t) * sqrt(t) end
	function tap(t) return 3.5 * t * t * sqrt(1 - t) end
	function pulse(t) return t < .5 and tap(t * 2) or -pop(t * 2 - 1) end
	
	function spike(t) return exp(-10 * abs(2 * t - 1)) end
	function inverse(t) return t * t * (1 - t) * (1 - t) / (0.5 - t) end
	
	function square(t) return t == 1 and 0 or 1 end
	
	popElastic = cache(function(damp)
		return cache(function(count)
			return function(t)
				return (1000 ^ -(t ^ damp) - 0.001) * sin(count * pi * t)
			end
		end)
	end)
	tapElastic = cache(function(damp)
		return cache(function(count)
			return function(t)
				return (1000 ^ -((1 - t) ^ damp) - 0.001) * sin(count * pi * (1 - t))
			end
		end)
	end)
	pulseElastic = cache(function(damp)
		return cache(function(count)
			local tap_e = tapElastic[damp][count]
			local pop_e = popElastic[damp][count]
			return function(t)
				return t > .5 and -pop_e(t * 2 - 1) or tap_e(t * 2)
			end
		end)
	end)
	
	impulse = cache(function(damp)
		return function(t)
			t = t ^ damp
			return t * (1000 ^ -t - 0.001) * 18.6
		end
	end)
	
	local kick_cache = {}
	
	function kick(amt)
		kick_cache[amt] = kick_cache[amt] or function(t)
			return (sqrt(t) * pow(1 - t, amt)) * (2.5 + amt * .6)
		end
		return kick_cache[amt]
	end
	
	function instant() return 1 end
	function linear(t) return t end
	function inQuad(t) return t * t end
	function outQuad(t) return -t * (t - 2) end
	function inOutQuad(t)
		t = t * 2
		if t < 1 then
			return 0.5 * t ^ 2
		else
			return 1 - 0.5 * (2 - t) ^ 2
		end
	end
	function inCubic(t) return t * t * t end
	function outCubic(t) return 1 - (1 - t) ^ 3 end
	function inOutCubic(t)
		t = t * 2
		if t < 1 then
			return 0.5 * t ^ 3
		else
			return 1 - 0.5 * (2 - t) ^ 3
		end
	end
	function inQuart(t) return t * t * t * t end
	function outQuart(t) return 1 - (1 - t) ^ 4 end
	function inOutQuart(t)
		t = t * 2
		if t < 1 then
			return 0.5 * t ^ 4
		else
			return 1 - 0.5 * (2 - t) ^ 4
		end
	end
	function inQuint(t) return t ^ 5 end
	function outQuint(t) return 1 - (1 - t) ^ 5 end
	function inOutQuint(t)
		t = t * 2
		if t < 1 then
			return 0.5 * t ^ 5
		else
			return 1 - 0.5 * (2 - t) ^ 5
		end
	end
	function inExpo(t) return 1000 ^ (t - 1) - 0.001 end
	function outExpo(t) return 0.999 - 1000 ^ -t end
	function inOutExpo(t)
		t = t * 2
		if t < 1 then
			return 0.5 * 1000 ^ (t - 1) - 0.0005
		else
			return 0.9995 - 0.5 * 1000 ^ (1 - t)
		end
	end
	function inCirc(t) return 1 - sqrt(1 - t * t) end
	function outCirc(t) return sqrt(-t * t + 2 * t) end
	function inOutCirc(t)
		t = t * 2
		if t < 1 then
			return 0.5 - 0.5 * sqrt(1 - t * t)
		else
			t = t - 2
			return 0.5 + 0.5 * sqrt(1 - t * t)
		end
	end
	
	-- custom not-standard implementation for back
	-- recommended m is 3
	-- no restrictions on m
	-- m is how far back it pulls
	
	local inBack_cache = {}
	
	function inBack(m)
		local m1 = m + 1
		inBack_cache[m] = inBack_cache[m] or function(t)
			return (t == 1) and 1 or t * t * t * (t * t * m1 - m)
		end
		return inBack_cache[m]
	end
	
	local outBack_cache = {}
	
	function outBack(m)
		local m1 = m + 1
		outBack_cache[m] = outBack_cache[m] or function(t)
			t = 1 - t
			return (t == 0) and 1 or 1 - t * t * t * (t * t* m1 - m)
		end
		return outBack_cache[m]
	end
	
	local inOutBack_cache = {}
	
	function inOutBack(m)
		local m1 = m + 1
		local ib = inBack(m)
		inOutBack_cache[m] = inOutBack_cache[m] or function(t)
			return (t == 1) and 1 or (t < .5) and .5 * ib(t * 2) or 1 - .5 * ib(2 - t * 2)
		end
		return inOutBack_cache[m]
	end
	
	-- custom non-standard implementation for elastic
	-- recommended m is 3
	-- m must be a non-negative integer
	-- m is the number of squiggles
	
	local inElastic_cache = {}
	
	function inElastic(m)
		local factor = pi * (m + .5)
		local factor2 = (math.mod(m, 2) == 0) and 1 or -1
		inElastic_cache[m] = inElastic_cache[m] or function(t)
			return (t == 1) and 1 or factor2 * (pow(1000, t - 1) - .001) * sin(t * factor)
		end
		return inElastic_cache[m]
	end
	
	local outElastic_cache = {}
	
	function outElastic(m)
		local factor = pi * (m + .5)
		local factor2 = (math.mod(m, 2) == 0) and 1 or -1
		outElastic_cache[m] = outElastic_cache[m] or function(t)
			t = 1 - t
			return (t == 0) and 1 or 1 - factor2 * (pow(1000, t - 1) - .001) * sin(t * factor)
		end
		return outElastic_cache[m]
	end
	
	local inOutElastic_cache = {}
	
	function inOutElastic(m)
		local m1 = m + 1
		local ie = inElastic(m)
		inOutElastic_cache[m] = inOutElastic_cache[m] or function(t)
			return (t == 1) and 1 or (t < .5) and .5 * ie(t * 2) or 1 - .5 * ie(2 - t * 2)
		end
		return inOutElastic_cache[m]
	end
	
	-- custom non-standard implementation for bounce
	-- recommended m is 6
	-- m must be a non-negative integer
	-- m is the number of bounces
	
	local inBounce_cache = {}
	
	function inBounce(m)
		local factor = pi * (m + .5)
		inBounce_cache[m] = inBounce_cache[m] or function(t)
			local k = 1 - t
			return (t == 1) and 1 or (pow(50, t - 1) - .02) * math.abs(sin((1 - k ^ 1.5) * factor))
		end
		return inBounce_cache[m]
	end
	
	local outBounce_cache = {}
	
	function outBounce(m)
		local factor = pi * (m + .5)
		outBounce_cache[m] = outBounce_cache[m] or function(t)
			local k = 1 - t
			return (k == 1) and 1 or 1 -(pow(50, k - 1) - .02) * math.abs(sin((1 - t ^ 1.5) * factor))
		end
		return outBounce_cache[m]
	end
	
	local inOutBounce_cache = {}
	
	function inOutBounce(m)
		local m1 = m + 1
		local ib = inBounce(m)
		inOutBounce_cache[m] = inOutBounce_cache[m] or function(t)
			return (t == 1) and 1 or (t < .5) and .5 * ib(t * 2) or 1 - .5 * ib(2 - t * 2)
		end
		return inOutBounce_cache[m]
	end
	
	function inSine(x)
		return 1 - cos(x * (pi * 0.5))
	end
	
	function outSine(x)
		return sin(x * (pi * 0.5))
	end
	
	function inOutSine(x)
		return 0.5 - 0.5 * cos(x * pi)
	end
	
end)()"/>
